%button {
  background-image: none;
  border-image: none;
  border: 0;
  cursor: pointer;
  display: inline-block;
  font-style: normal;
  font-weight: normal;
  position: relative;
  text-align: center;
  text-decoration: none;
  text-transform: none;
  transition: background 40ms ease-out, color 40ms ease-out, box-shadow 40ms ease-out;
  user-select: none;
  white-space: nowrap;
  -webkit-appearance: none;
  -webkit-user-drag: none;
  &:hover,
  &:focus {
    background-image: linear-gradient(to bottom, rgba(255, 255, 255, 0), rgba(0, 0, 0, .15));
    box-shadow: 1px 1px 1px rgba(0, 0, 0, .2);
  }

  &:active {
    background-image: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 0, 0, .15));
    box-shadow: inset 0 0 2px rgba(0, 0, 0, .5);
  }
}

@mixin button($colors: false, $size: false, $lines: false) {
  @if $colors {
    @each $property, $color in ($colors) {
      @if $property == background-color or $property == color {
        #{$property}: $color;
      } @else {
        @warn "Assuming properties to be background-color or color";
      }
    }

    &:hover,
    &:focus {
      @each $property, $color in ($colors) {
        @if $property == background-color or $property == color {
          #{$property}: adjust-hue($color, 10deg);
        } @else {
          @warn "Assuming properties to be background-color or color";
        }
      }
    }

    &:active {
      @each $property, $color in ($colors) {
        @if $property == background-color or $property == color {
          #{$property}: adjust-hue($color, 15deg);
        } @else {
          @warn "Assuming properties to be background-color or color";
        }
      }
    }
  }
  @if $size and $lines {
    font-size: em($size);
    line-height: line-height($lines, $size);
    height: rhythm($lines, $size);
    padding-left: em($size);
    padding-right: em($size);
  }
}
