%rule-reset {
 border: 0;
}

@mixin rule($style: false, $width: false, $color: false) {
  @if $width {
    border-bottom-width: $width;
  }
  @if $style {
    border-bottom-style: $style;
  }
  @if $color {
    border-bottom-color: $color;
  }
  @if $width {
    margin-bottom: rhythm(1, $base-font-size, $width);
  }
}

@mixin rule-fade($width: false, $color: false) {
  @if $color {
    background: linear-gradient(
        to left,
        rgba($color, 0) 0%,
        rgba($color, 1) 25%,
        rgba($color, 1) 75%,
        rgba($color, 0) 100%
    );
  }
  @if $width {
    height: $width;
    margin-bottom: rhythm(1, $base-font-size, $width);
  }
}

@mixin rule-shadow($width: $base-line-height, $color: $black) {
  box-shadow: inset 0 $width $width -#{$width} rgba($black, .3);
  height: $width;
  margin-bottom: rhythm(1, $base-font-size, $width);
}

%rule-inset {
  border-top-style: solid;
}

@mixin rule-inset($widths: false, $colors: false) {
  @if $colors {
    @each $side, $color in ($colors) {
      @if $side == top or $side == bottom {
        border-#{$side}-color: rgba($color, .5);
      } @else {
        @warn "Assuming side colors to be top or bottom";
      }
    }
  }
  @if $widths {
    @each $side, $width in ($widths) {
      @if $side == top or $side == bottom {
        border-#{$side}-width: $width;
      } @else {
        @warn "Assuming side widths to be top or bottom";
      }
    }
    margin-bottom: rhythm(1, $base-font-size, map-get($widths, bottom)+map-get($widths, top));
  }
}

%rule-ornament {
  position:relative;

  &:after {
    position: absolute;
    top: 0;
    left: 50%;
    line-height: 0;
    text-align: center;
  }

  &[data-ornament]:after {
    content:attr(data-ornament);
  }
}

@mixin rule-ornament($content: false, $content-size: false, $content-colors: false) {
  &:after {
    @if $content-colors {
      @each $property, $color in ($content-colors) {
        @if $property == background-color or $property == color {
          #{$property}: $color;
        } @else {
          @warn "Assuming properties to be background-color or color";
        }
      }
    }
    @if $content {
      content: '#{$content}'
    }
    @if $content-size {
      font-size: $content-size;
      height: $content-size;
      margin-left: -$content-size / 2;
      width: $content-size;
    }
  }
}
