@import 'base',
'placeholders';


/*
# Grid

Styleguide 2
*/

/*
# Grid Container

This mixin defines the max width of the page and is used in context with setting column widths within the layout.

<pre>.grid {
  @include grid($site-width);
}</pre>

Markup:
<div class="grid">.grid</div>

Styleguide 2.0.1
*/
@import 'modules/grid';

.grid {
  @include grid($site-width);
}

/*
# Grid Row

This mixin defines rows within the layout. Its used to clear column floats.

<pre>.grid__row {
  @include grid-row();
}</pre>

Markup:
<div class="grid">
  <div class="grid__row">.grid__row</div>
</div>

Styleguide 2.0.2
*/
.grid__row {
  @include grid-row();
}

/*
# Grid Column

This mixin defines columns within a row. The <code>%grid-col</code> placeholder is used to group common styles for all columns.

<pre>.grid__col-1 {
  @extend %grid-col;
  @include grid-col($span: 1, $columns: $mobile-columns, $gutter: right, $gutter-size: $mobile-gutter);
}
.grid__col-2 {
  @extend %grid-col;
  @include grid-col($span: 3, $columns: $mobile-columns, $gutter: left, $gutter-size: $mobile-gutter);
}</pre>

Markup:
<div class="grid">
  <div class="grid__row">
    <div class="grid__col-1">
      .grid__col-1
    </div>
    <div class="grid__col-2">
      .grid__col-2
    </div>
  </div>
</div>

Styleguide 2.0.3
*/
.grid__col-1 {
  @extend %grid-col;
  @include grid-col($span: 1, $columns: $mobile-columns, $gutter: right, $gutter-size: $mobile-gutter);
}

.grid__col-2 {
  @extend %grid-col;
  @include grid-col($span: 3, $columns: $mobile-columns, $gutter: left, $gutter-size: $mobile-gutter);
}

/*
# Grid Column Ordering

This mixin defines column positioning commonly used for source ordering content.

<pre>.primary {
  @extend %grid-col;
  @include grid-col($span: 1, $columns: $mobile-columns, $gutter: right, $gutter-size: $mobile-gutter);
  @include grid-col-order($direction: left, $span: 3, $columns: $mobile-columns);
}
.secondary {
  @extend %grid-col;
  @include grid-col($span: 3, $columns: $mobile-columns, $gutter: left, $gutter-size: $mobile-gutter);
  @include grid-col-order($direction: right, $span: 1, $columns: $mobile-columns);
}</pre>

Markup:
<div class="grid">
  <div class="grid__row">
    <div class="primary">
      .primary
    </div>
    <div class="secondary">
      .secondary
    </div>
  </div>
</div>

Styleguide 2.0.4
*/
.primary {
  @extend %grid-col;
  @include grid-col($span: 1, $columns: $mobile-columns, $gutter: right, $gutter-size: $mobile-gutter);
  @include grid-col-order($direction: left, $span: 3, $columns: $mobile-columns);
}

.secondary {
  @extend %grid-col;
  @include grid-col($span: 3, $columns: $mobile-columns, $gutter: left, $gutter-size: $mobile-gutter);
  @include grid-col-order($direction: right, $span: 1, $columns: $mobile-columns);
}

/*
# Grid Column Offsets

This mixin defines column offsets using left and right margins.

<pre>.offset-right {
  @extend %grid-col;
  @include grid-col($span: 1, $columns: $mobile-columns, $gutter: right, $gutter-size: $mobile-gutter);
  @include grid-col-offset($direction: right, $span: 1, $columns: $mobile-columns);
}
.offset-left {
  @extend %grid-col;
  @include grid-col($span: 1, $columns: $mobile-columns, $gutter: left, $gutter-size: $mobile-gutter);
  @include grid-col-offset($direction: left, $span: 1, $columns: $mobile-columns);
}</pre>

Markup: <div class="grid">
  <div class="grid__row">
    <div class="offset-left">
      .offset-left
    </div>
    <div class="offset-right">
      .offset-right
    </div>
  </div>
</div>

Styleguide 2.0.5
*/

.offset-right {
  @extend %grid-col;
  @include grid-col($span: 1, $columns: $mobile-columns, $gutter: right, $gutter-size: $mobile-gutter);
  @include grid-col-offset($direction: right, $span: 1, $columns: $mobile-columns);
}

.offset-left {
  @extend %grid-col;
  @include grid-col($span: 1, $columns: $mobile-columns, $gutter: left, $gutter-size: $mobile-gutter);
  @include grid-col-offset($direction: left, $span: 1, $columns: $mobile-columns);
}


/*
# Menu

Styleguide 3
*/

@import 'modules/menu';

/*
# Default Menu

These mixins defines the styles necessary for the top level navigation module. The <code>%unstyled-list</code> placeholder is used to reset the styles of list markup and can be reused for sub menus.

<pre>.menu {
  @extend %unstyled-list;
  @include menu();
  &>.menu__item {
    @include menu-item();
    &>a {
      @extend %block-link;
      padding: .75em;
      @include link-colors($foreground: 'purple' 'yellow' 'yellow', $background: '#e0774c' 'blue' 'purple');
    }
  }
}</pre>

Markup: <nav role="navigation">
  <ul class="menu">
    <li class="menu__item"><a href="#">Item 1</a></li>
    <li class="menu__item"><a href="#">Item 2</a></li>
    <li class="menu__item"><a href="#">Item 3</a></li>
    <li class="menu__item"><a href="#">Item 4</a></li>
    <li class="menu__item"><a href="#">Item 5</a></li>
  </ul>
</nav>

Styleguide 3.0.1
*/
.menu {
  @extend %unstyled-list;
  @include menu();
  &>.menu__item {
    @include menu-item();
    &>a {
      @extend %block-link;
      padding: .75em;
      @include link-colors($foreground: 'purple' 'yellow' 'yellow', $background: '#e0774c' 'blue' 'purple');
    }
  }
}

/*
# Right Menu

Right aligned menu.

<pre>.menu-1 {
  @extend %unstyled-list;
  @include menu($align: right);
  &>.menu-1__item {
    @include menu-item();
    &>a {
      @extend %block-link;
      padding: .75em;
      @include link-colors($foreground: 'purple' 'yellow' 'yellow', $background: '#e0774c' 'blue' 'purple');
    }
  }
}</pre>

Markup:
<nav role="navigation">
  <ul class="menu-1">
    <li class="menu-1__item"><a href="#">Item 1</a></li>
    <li class="menu-1__item"><a href="#">Item 2</a></li>
    <li class="menu-1__item"><a href="#">Item 3</a></li>
    <li class="menu-1__item"><a href="#">Item 4</a></li>
    <li class="menu-1__item"><a href="#">Item 5</a></li>
  </ul>
</nav>

Styleguide 3.0.2
*/
.menu-1 {
  @extend %unstyled-list;
  @include menu($align: right);
  &>.menu-1__item {
    @include menu-item();
    &>a {
      @extend %block-link;
      padding: .75em;
      @include link-colors($foreground: 'purple' 'yellow' 'yellow', $background: '#e0774c' 'blue' 'purple');
    }
  }
}

/*
# Center Menu

Center aligned menu.

<pre>.menu-2 {
  @extend %unstyled-list;
  @include menu($align: center);
  &>.menu-2__item {
    @include menu-item();
    & > a {
      @extend %block-link;
      padding: .75em;
      @include link-colors($foreground: 'purple' 'yellow' 'yellow', $background: '#e0774c' 'blue' 'purple');
    }
  }
}</pre>

Markup:
<nav role="navigation">
  <ul class="menu-2">
    <li class="menu-2__item"><a href="#">Item 1</a></li>
    <li class="menu-2__item"><a href="#">Item 2</a></li>
    <li class="menu-2__item"><a href="#">Item 3</a></li>
    <li class="menu-2__item"><a href="#">Item 4</a></li>
    <li class="menu-2__item"><a href="#">Item 5</a></li>
  </ul>
</nav>

Styleguide 3.0.3
*/
.menu-2 {
  @extend %unstyled-list;
  @include menu($align: center);
  &>.menu-2__item {
    @include menu-item();
    & > a {
      @extend %block-link;
      padding: .75em;
      @include link-colors($foreground: 'purple' 'yellow' 'yellow', $background: '#e0774c' 'blue' 'purple');
    }
  }
}

/*
# Justified Menu

Justified menu that spans accross entire width and has equal width menu items.

<pre>.menu-3 {
  @extend %unstyled-list;
  @include menu($align: justified);
  &>.menu-3__item {
    @include menu-item($align: justified, $num: 5);
    &>a {
      @extend %block-link;
      padding: .75em;
      @include link-colors($foreground: 'purple' 'yellow' 'yellow', $background: '#e0774c' 'blue' 'purple');
    }
  }
}</pre>

Markup:
<nav role="navigation">
  <ul class="menu-3">
    <li class="menu-3__item"><a href="#">Item 1</a></li>
    <li class="menu-3__item"><a href="#">Item 2</a></li>
    <li class="menu-3__item"><a href="#">Item 3</a></li>
    <li class="menu-3__item"><a href="#">Item 4</a></li>
    <li class="menu-3__item"><a href="#">Item 5</a></li>
  </ul>
</nav>

Styleguide 3.0.4
*/
.menu-3 {
  @extend %unstyled-list;
  @include menu($align: justified);
  &>.menu-3__item {
    @include menu-item($align: justified, $num: 5);
    &>a {
      @extend %block-link;
      padding: .75em;
      @include link-colors($foreground: 'purple' 'yellow' 'yellow', $background: '#e0774c' 'blue' 'purple');
    }
  }
}

/*
# Stacked Menu

Vertically stacked menu items.

<pre>.menu-4 {
  @extend %unstyled-list;
  @include menu();
  &>.menu-4__item {
    @include menu-item(stacked);
    &>a {
      @extend %block-link;
      padding: .75em;
      @include link-colors($foreground: 'purple' 'yellow' 'yellow', $background: '#e0774c' 'blue' 'purple');
    }
  }
}</pre>

Markup:
<nav role="navigation">
  <ul class="menu-4">
    <li class="menu-4__item"><a href="#">Item 1</a></li>
    <li class="menu-4__item"><a href="#">Item 2</a></li>
    <li class="menu-4__item"><a href="#">Item 3</a></li>
    <li class="menu-4__item"><a href="#">Item 4</a></li>
    <li class="menu-4__item"><a href="#">Item 5</a></li>
  </ul>
</nav>

Styleguide 3.0.5
*/
.menu-4 {
  @extend %unstyled-list;
  @include menu();
  &>.menu-4__item {
    @include menu-item(stacked);
    &>a {
      @extend %block-link;
      padding: .75em;
      @include link-colors($foreground: 'purple' 'yellow' 'yellow', $background: '#e0774c' 'blue' 'purple');
    }
  }
}

/*
# Sub Menu

Styleguide 4
*/

@import 'modules/sub-menu';

/*
# Sub Menu

These mixins defines the styles necessary to create dropdown and flyout sub menus. The <code>%unstyled-list</code> placeholder is used to reset the default list styles. The <code>%sub-menu-item</code> placeholder contains styles for the sub menu items. The <code>%block-link</code> placeholder contains styles to display hyperlinks as blocks.

<pre>.sub-menu {
  @extend %unstyled-list;
  @include sub-menu($width: 10em, $position: true);
  & > .sub-menu__item {
    @extend %sub-menu-item;

    &:hover {
      & > .sub-menu {
        @include sub-menu-state($active: true, $flyout: true);
      }
    }
  }
  a {
    @extend %block-link;
    padding: .75em;
    @include link-colors($foreground: 'orange' 'red' 'green', $background: 'blue' 'green' 'red');
  }
}
.menu__item {
  &:hover {
    &>.sub-menu {
      @include sub-menu-state($active: true, $flyout: false);
    }
  }
}</pre>

Markup:
<nav role="navigation">
  <ul class="menu">
    <li class="menu__item"><a href="#">Item 1</a></li>
    <li class="menu__item"><a href="#">Item 2</a></li>
    <li class="menu__item"><a href="#">Item 3</a></li>
    <li class="menu__item"><a href="#">Item 4</a>
      <ul class="sub-menu">
        <li class="sub-menu__item"><a href="#">Sub Menu Item 1</a></li>
        <li class="sub-menu__item"><a href="#">Sub Menu Item 2</a></li>
        <li class="sub-menu__item"><a href="#">Sub Menu Item 3</a></li>
        <li class="sub-menu__item"><a href="#">Sub Menu Item 4</a>
        <ul class="sub-menu">
          <li class="sub-menu__item"><a href="#">Sub Menu Item 1</a></li>
          <li class="sub-menu__item"><a href="#">Sub Menu Item 2</a></li>
          <li class="sub-menu__item"><a href="#">Sub Menu Item 3</a></li>
          <li class="sub-menu__item"><a href="#">Sub Menu Item 4</a></li>
          <li class="sub-menu__item"><a href="#">Sub Menu Item 5</a></li>
        </ul>
        </li>
        <li class="sub-menu__item"><a href="#">Sub Menu Item 5</a></li>
      </ul>
    </li>
    <li class="menu__item"><a href="#">Item 5</a></li>
  </ul>
</nav>

Styleguide 4.0.1
*/

.sub-menu {
  @extend %unstyled-list;
  @include sub-menu($width: 10em, $position: true);
  & > .sub-menu__item {
    @extend %sub-menu-item;

    &:hover {
      & > .sub-menu {
        @include sub-menu-state($active: true, $flyout: true);
      }
    }
  }

  a {
    @extend %block-link;
    padding: .75em;
    @include link-colors($foreground: 'orange' 'red' 'green', $background: 'blue' 'green' 'red');
  }
}

.menu__item {
  &:hover {
    &>.sub-menu {
      @include sub-menu-state($active: true, $flyout: false);
    }
  }
}

/*
# Button

Styleguide 5
*/

@import 'modules/button';

/*
# Normal Button

Button mixin for defining button size and colors. The <code>%button</code> placeholder contains required styles that a button needs and is used to group common styles accross all buttons. Both mixin and placeholder are required.

<pre>.button,
input.button {
  @extend %button;
  @include button(normal, $background: #00f, $foreground: #ffa500);
  width: 100%;

  @media screen and (min-width: $small-screen) {
    width: auto;
  }
}</pre>

Markup: <a href="#" class="button">Link Element</a>
<input type="submit" name="submit" value="Input Element" class="button">
<button class="button">Button Element</button>

Styleguide 5.0.1
*/
.button,
input.button {
  @extend %button;
  @include button(normal, $background: #00f, $foreground: #ffa500);
  width: 100%;

  @media screen and (min-width: $small-screen) {
    width: auto;
  }
}

/*
# Large Button

Button mixin for defining button size and colors. The <code>%button</code> placeholder contains required styles that a button needs and is used to group common styles accross all buttons. Both mixin and placeholder are required.

<pre>.button--large,
input.button--large {
  @extend %button;
  @include button(large, $background: #00f, $foreground: #ffa500);
  width: 100%;

  @media screen and (min-width: $small-screen) {
    width: auto;
  }
}</pre>

Markup: <a href="#" class="button--large">Link Element</a>
<input type="submit" name="submit" value="Input Element" class="button--large">
<button class="button--large">Button Element</button>

Styleguide 5.0.2
*/
.button--large,
input.button--large {
  @extend %button;
  @include button(large, $background: #00f, $foreground: #ffa500);
  width: 100%;

  @media screen and (min-width: $small-screen) {
    width: auto;
  }
}

/*
# Xlarge Button

Button mixin for defining button size and colors. The <code>%button</code> placeholder contains required styles that a button needs and is used to group common styles accross all buttons. Both mixin and placeholder are required.

<pre>.button--xlarge,
input.button--xlarge {
  @extend %button;
  @include button(xlarge, $background: #00f, $foreground: #ffa500);
  width: 100%;

  @media screen and (min-width: $small-screen) {
    width: auto;
  }
}</pre>

Markup: <a href="#" class="button--xlarge">Link Element</a>
<input type="submit" name="submit" value="Input Element" class="button--xlarge">
<button class="button--xlarge">Button Element</button>

Styleguide 5.0.3
*/
.button--xlarge,
input.button--xlarge {
  @extend %button;
  @include button(xlarge, $background: #00f, $foreground: #ffa500);
  width: 100%;

  @media screen and (min-width: $small-screen) {
    width: auto;
  }
}

/*
# Form

Styleguide 6
*/

@import 'modules/form';

/*
# Form Control

The form control mixin defines the styles for form controls. The <code>%form-control</code> placeholder contains common styles for form controls. Both are required.

<pre>.form {
  .form__row {
    @include grid-row();
    margin-bottom: rhythm();
  }
  .form__col {
    @extend %grid-col;
    margin-bottom: rhythm();
  }
  .form__control {
    @extend %form-control;
    @include form-control(xlarge);
  }
  .form__textarea {
    @extend %form-control;
    @include form-control(xlarge, true);
  }
  .title,
  .nickname,
  .state,
  .comments {
    @include grid-col(2, 2, left);
  }
  .first-name,
  .last-name {
    @include grid-col(1, 2, left);
  }

  @media screen and (min-width: $small-screen) {
    .form__control {
      @include form-control(normal);
    }
    .form__textarea {
      @include form-control(normal, true);
    }
    .title,
    .state {
      @include grid-col(3, 9, right, $desktop-gutter);
    }
    .first-name,
    .last-name,
    .nickname {
      @include grid-col(3, 9, right, $desktop-gutter);
    }
    .comments {
      @include grid-col(6, 9, right, $desktop-gutter);
    }
  }
}</pre>

Markup: <form action="" method="get" role="form" class="form">
  <div class="form__row">
    <div class="form__col first-name">
      <label for="first_name">First Name</label>
      <input type="text" name="first_name" placeholder="first name" class="form__control" />
    </div>
    <div class="form__col last-name">
      <label for="last_name">Last Name</label>
      <input type="text" name="last_name" placeholder="last name" class="form__control" />
    </div>
    <div class="form__col nickname">
        <label for="nickname">Nickname</label>
          <input type="text" name="nickname" placeholder="nickname" class="form__control" />
    </div>
  </div>
  <div class="form__row">
    <div class="form__col state">
      <label for="state">State</label>
      <select name="state" class="form__control">
        <option value="alabama">AL</option>
        <option value="alaska">AK</option>
        <option value="arizona">AR</option>
        <option value="california">CA</option>
      </select>
    </div>
  </div>
  <div class="form__row">
    <div class="form__col comments">
      <label for="comments">Comments</label>
      <textarea name="comments" placeholder="comments" class="form__textarea"></textarea>
    </div>
  </div>
</form>

Styleguide 6.0.1
*/

.form {

  .form__row {
    @include grid-row();
    margin-bottom: rhythm();
  }

  .form__col {
    @extend %grid-col;
    margin-bottom: rhythm();
  }

  .form__control {
    @extend %form-control;
    @include form-control(xlarge);
  }

  .form__textarea {
    @extend %form-control;
    @include form-control(xlarge, true);
  }

  .title,
  .nickname,
  .state,
  .comments {
    @include grid-col(2, 2, left);
  }

  .first-name,
  .last-name {
    @include grid-col(1, 2, left);
  }

  @media screen and (min-width: $small-screen) {
    .form__control {
      @include form-control(normal);
    }

    .form__textarea {
      @include form-control(normal, true);
    }

    .title,
    .state {
      @include grid-col(3, 9, right, $desktop-gutter);
    }

    .first-name,
    .last-name,
    .nickname {
      @include grid-col(3, 9, right, $desktop-gutter);
    }

    .comments {
      @include grid-col(6, 9, right, $desktop-gutter);
    }
  }
}

/*
# Form Control Addon

The form control addon mixin defines the styles for prefixed or appended label addons. The <code>%form-control-addon</code> placeholder contains common styles used for addons. Both are required.

<pre>.url,
.donate {
  @include grid-col(2, 2, left);
}
.url-addon {
  @extend %form-control-addon;
  @include form-control-addon(xlarge, true);
}
.donate-addon {
  @extend %form-control-addon;
  @include form-control-addon(xlarge, false);
}
@media screen and (min-width: $small-screen) {
  .url-addon {
    @include form-control-addon(normal, true);
  }
  .donate-addon {
    @include form-control-addon(normal, false);
  }
  .url,
  .donate {
    @include grid-col(3, 9, right, $desktop-gutter);
  }
}</pre>

Markup: <form action="" method="get" role="form" class="form">
  <div class="form__row">
    <div class="form__col url">
      <label for="url">Website</label>
      <div class="url-addon">
        <span>http://</span>
        <input type="text" name="url" placeholder="website address" class="form__control" />
      </div>
    </div>
  </div>
  <div class="form__row">
    <div class="form__col dontate">
      <label for="donate">Amount</label>
      <div class="donate-addon">
        <span>.00</span>
        <input type="number" name="donate" placeholder="10" class="form__control" />
      </div>
    </div>
  </div>
</form>

Styleguide 6.0.2
*/
.url,
.donate {
  @include grid-col(2, 2, left);
}
.url-addon {
  @extend %form-control-addon;
  @include form-control-addon(xlarge, true);
}
.donate-addon {
  @extend %form-control-addon;
  @include form-control-addon(xlarge, false);
}
@media screen and (min-width: $small-screen) {
  .url-addon {
    @include form-control-addon(normal, true);
  }
  .donate-addon {
    @include form-control-addon(normal, false);
  }
  .url,
  .donate {
    @include grid-col(3, 9, right, $desktop-gutter);
  }
}

/*
# Media

Styleguide 7
*/

@import 'modules/media';

/*
# Media Object

The media-element mixin defines the styles necessary to layout media along side text. The <code>%media</code> placeholder contains common styles for media blocks. The <code>%media-element</code> placeholder contains common styles for media elements. The <code>%media-content</code> placeholder contains common styles used for all media content. All placeholers and mixins are required.

<pre>.media {
  @extend %media;
}
.media__element {
  @extend %media-element;
  @include media-element(none, 150px);

  @media screen and (min-width: $small-screen) {
    @include media-element();
  }
}
.media__content {
  @extend %media-content;
}</pre>

Markup: <div class="media">
  <div class="media__element"><img src="http://fpoimg.com/150x125?text=Preview" alt=""></div>
  <div class="media__content">
    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
    tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,
    quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo
    consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse
    cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non
    proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>
  </div>
</div>

Styleguide 7.0.1
*/
.media {
  @extend %media;
}

.media__element {
  @extend %media-element;
  @include media-element(none, 150px);

  @media screen and (min-width: $small-screen) {
    @include media-element();
  }
}

.media__content {
  @extend %media-content;
}

/*
# Alert

Styleguide 8
*/

@import 'modules/alert';

/*
# Default Alert

The alert mixin defines the base styles for a typical alert or validation message.

Usage:
<pre>.alert,
.alert-notice,
.alert-error,
.alert-success,
.alert-warning {
  @include alert();
}</pre>

Markup: <div class="alert">
  <p>This is an alert.</p>
</div>

Styleguide 8.0.1
*/
.alert,
.alert-notice,
.alert-error,
.alert-success,
.alert-warning {
  @include alert();
}

/*
# Notice Alert

The alert type mixin defines the colors that will be rendered on the alert object.

Usage:
<pre>.alert-notice {
  @include alert-type(notice);
}</pre>

Markup: <div class="alert-notice">
  <p>This is an notice alert.</p>
</div>

Styleguide 8.0.2
*/
.alert-notice {
  @include alert-type(notice);
}

/*
# Error Alert

The alert type mixin defines the colors that will be rendered on the alert object.

Usage:
<pre>.alert-error {
  @include alert-type(error);
}</pre>

Markup:
<div class="alert-error">
  <p>This is an error alert.</p>
</div>

Styleguide 8.0.3
*/
.alert-error {
  @include alert-type(error);
}

/*
# Success Alert

The alert type mixin defines the colors that will be rendered on the alert object.

Usage:
<pre>.alert-success {
  @include alert-type(success);
}</pre>

Markup:
<div class="alert-success">
  <p>This is an success alert.</p>
</div>

Styleguide 8.0.4
*/
.alert-success {
  @include alert-type(success);
}

/*
# Warning Alert

The alert type mixin defines the colors that will be rendered on the alert object.

Usage:
<pre>.alert-warning {
  @include alert-type(warning);
}</pre>

Markup:
<div class="alert-warning">
  <p>This is an warning alert.</p>
</div>

Styleguide 8.0.5
*/
.alert-warning {
  @include alert-type(warning);
}

/*
# Columns

Styleguide 9
*/

@import 'modules/column';

/*
# Columns

The Column mixin contains the styles to apply multiple columns of text on an block element. The <code>%column</code> placeholder is used to add widow and orphan control to the columns. Both are required.

<pre>.columns {
  @extend %column;
  @include column(3);
}</pre>

Markup:
<div class="columns">
  <p>Aenean lacinia bibendum nulla sed consectetur. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Donec sed odio dui. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Sed posuere consectetur est at lobortis. Donec sed odio dui.</p>
  <p>Sed posuere consectetur est at lobortis. Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>
  <p>Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Maecenas sed diam eget risus varius blandit sit amet non magna. Nullam id dolor id nibh ultricies vehicula ut id elit. Nullam id dolor id nibh ultricies vehicula ut id elit.</p>
  <p>Vestibulum id ligula porta felis euismod semper. Etiam porta sem malesuada magna mollis euismod. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Maecenas faucibus mollis interdum. Cras mattis consectetur purus sit amet fermentum. Maecenas sed diam eget risus varius blandit sit amet non magna. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit.</p>
</div>

Styleguide 9.0.1
*/
.columns {
  @extend %column;
  @include column(3);
}

@import 'helpers';


/*
# Grid Blocks

Styleguide 10
*/

@import 'modules/grid-block';

/*
# Grid Block

The grid block mixin contains the styles needed to create fixed width inline block elements that are laid out in a grid format. The <code>%grid-block</code> placeholder contains the base styles for the grid blocks. Both are required.

<pre>.grid-block {
  @extend %grid-block;
  @include grid-block($container-width: 320px, $columns: 2);

  @media screen and (min-width: $small-screen) {
    @include grid-block($container-width: 800px, $columns: 4);
  }
}</pre>

Markup:
<div class="grid-block"><img src="http://fpoimg.com/200x200"></div>
<div class="grid-block"><img src="http://fpoimg.com/200x200"></div>
<div class="grid-block"><img src="http://fpoimg.com/200x200"></div>
<div class="grid-block"><img src="http://fpoimg.com/200x200"></div>

Styleguide 10.0.1
*/

.grid-block {
  @extend %grid-block;
  @include grid-block($container-width: 320px, $columns: 2);

  @media screen and (min-width: $small-screen) {
    @include grid-block($container-width: 800px, $columns: 4);
  }
}

/*
# Label

Styleguide 11
*/

@import 'modules/label';

/*
# label

The label mixin contains the styles needed to create inline labels. The <code>%label</code> placeholder contains the base styles for the labels. Both are required.

<pre>.label {
  @extend %label;
  @include label($size: normal, $background: $light-gray, $foreground: $dark-gray);
}</pre>

Markup:
<p>Sample text. <span class="label">new</span></p>

Styleguide 11.0.1
*/

.label {
  @extend %label;
  @include label($size: normal, $background: $light-gray, $foreground: $dark-gray);
}