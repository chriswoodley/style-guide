@font-face {
  font-family: "fontawesome";
  src: url("/fonts/fontawesome/fontawesome-webfont.eot?#iefix") format("embedded-opentype"), url("/fonts/fontawesome/fontawesome-webfont.woff") format("woff"), url("/fonts/fontawesome/fontawesome-webfont.ttf") format("truetype"), url("/fonts/fontawesome/fontawesome-webfont.svg#entypo") format("svg");
}
/*
# Base Styles

Styleguide 1
*/
* {
  -moz-box-sizing: border-box;
       box-sizing: border-box;
}

html {
  font-family: "HelveticaNeue", "Helvetica", Arial, sans-serif;
  font-size: 87.5%;
  line-height: 1.5;
  -ms-text-size-adjust: 100%;
  -webkit-text-size-adjust: 100%;
}

body {
  margin: 0;
}

article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
nav,
section,
summary {
  display: block;
}

audio,
canvas,
progress,
video {
  display: inline-block;
  vertical-align: middle;
}

audio:not([controls]) {
  display: none;
  height: 0;
}

[hidden],
template {
  display: none;
}

/*
# Headings

Heading elements implement six levels of document headings, &lt;h1&gt; is the most important and &lt;h6&gt; is the least. A heading element briefly describes the topic of the section it introduces. Heading information may be used by user agents, for example, to construct a table of contents for a document automatically.

Markup:
<h1>Heading level 1</h1>
<h2>Heading level 2</h2>
<h3>Heading level 3</h3>
<h4>Heading level 4</h4>
<h5>Heading level 5</h5>
<h6>Heading level 6</h6>

Styleguide 1.0.1
*/
h1,
h2,
h3,
h4,
h5,
h6 {
  margin-bottom: 0;
  margin-top: 0;
}

h1 {
  font-size: 2.61793em;
  line-height: 1.14594;
  margin-bottom: 0.57297em;
}

h2 {
  font-size: 2.06121em;
  line-height: 1.09159;
  margin-bottom: 0.72773em;
}

h3 {
  font-size: 1.618em;
  line-height: 1.39061;
  margin-bottom: 0.92707em;
}

h4 {
  font-size: 1.27393em;
  line-height: 1.17746;
  margin-bottom: 1.17746em;
}

h5 {
  font-size: 1em;
  line-height: 1.5;
  margin-bottom: 1.5em;
}

h6 {
  font-size: 0.78736em;
  line-height: 1.90511;
  margin-bottom: 1.90511em;
}

/*
# Address

The HTML &lt;address&gt; Element may be used by authors to supply contact information for its nearest &lt;article&gt; or &lt;body&gt; ancestor; in the latter case, it applies to the whole document.

Markup: <address>
  You can contact author at <a href="http://www.somedomain.com/contact">www.somedomain.com</a>.<br>
  If you see any bugs, please <a href="mailto:webmaster@somedomain.com">contact webmaster</a>.<br>
  You may also want to visit us:<br>
  Mozilla Foundation<br>
  1981 Landings Drive<br>
  Building K<br>
  Mountain View, CA 94043-0801<br>
  USA
</address>

Styleguide 1.0.2
*/
address {
  color: #666666;
  font-style: normal;
  margin: 1.5em 0;
}

/*
# Paragraphs

The HTML &lt;p&gt; element (or HTML Paragraph Element) represents a paragraph of text. Paragraphs are block-level elements.

Markup: <p>This is the first paragraph of text. This is the first paragraph of text. This is the first paragraph of text. This is the first paragraph of text.</p>
<p>This is second paragraph of text. This is second paragraph of text. This is second paragraph of text. This is second paragraph of text.</p>

Styleguide 1.0.3
*/
p,
pre,
figure {
  margin: 0 0 1.5em;
}

/*
# Horizontal Rule

In HTML5 the HTML &lt;hr&gt; element represents a thematic break between paragraph-level elements (for example, a change of scene in a story, or a shift of topic with a section). In previous versions of HTML, it represented a horizontal rule. It may still be displayed as a horizontal rule in visual browsers, but is now defined in semantic terms, rather than presentational terms.

Markup:
<p>This is the first paragraph of text. This is the first paragraph of text. This is the first paragraph of text. This is the first paragraph of text.</p>
<hr>
<p>This is second paragraph of text. This is second paragraph of text. This is second paragraph of text. This is second paragraph of text.</p>

Styleguide 1.0.4
*/
hr {
  border: 0;
  border-top: 1px solid #222222;
  clear: both;
  display: block;
  height: 0;
  margin: 0 0 1.42857em;
  padding: 0;
}

/*
# Preformatted Text

The HTML &lt;pre&gt; Element (or HTML Preformatted Text) represents preformatted text. Text within this element is typically displayed in a non-proportional font exactly as it is laid out in the file. Whitespaces inside this element are displayed as typed.

Markup:
<!-- Some example CSS code -->
<pre>
body {
  color:red;
}
</pre>
<pre><code class="language-pascal">var i: Integer;
begin
   i := 1;
end.</code></pre>

Styleguide 1.0.5
*/
pre {
  overflow: auto;
}

/*
# Blockquotes

The HTML &lt;blockquote&gt; Element (or HTML Block Quotation Element) indicates that the enclosed text is an extended quotation. Usually, this is rendered visually by indentation (see Notes for how to change it). A URL for the source of the quotation may be given using the cite attribute, while a text representation of the source can be given using the &lt;cite&gt; element.

Markup:
<blockquote cite="http://developer.mozilla.org">
  <p>This is a quotation taken from the Mozilla Developer Center.</p>
</blockquote>
<blockquote>
  This is a quotation taken from the Mozilla Developer Center.
  <cite>Chris Woodley</cite>
</blockquote>

Styleguide 1.0.6
*/
blockquote {
  border-left: 4px solid #cccccc;
  margin: 0 2.61793em 1.5em;
  padding-left: 0.65448em;
  quotes: "\201C" "\201D" "\2018" "\2019";
}
blockquote > p {
  display: inline;
}
blockquote cite {
  color: #999999;
  display: block;
}
blockquote cite:before {
  content: '- ';
}

/*
# Unordered Lists

The HTML unordered list element (&lt;ul&gt;) represents an unordered list of items, namely a collection of items that do not have a numerical ordering, and their order in the list is meaningless.<br><br>

Markup:
<ul>
  <li>first item</li>
  <li>second item</li>
  <li>third item
    <ul>
      <li>sub list item</li>
      <li>sub list item</li>
      <li>sub list item</li>
    </ul>
  </li>
</ul>

Styleguide 1.0.7
*/
ul {
  margin: 0 0 1.5em;
  padding: 0 0 0 2.61793em;
}

/*
# Ordered Lists

The HTML &lt;ol&gt; Element (or HTML Ordered List Element) represents an ordered list of items. Typically, ordered-list items are displayed with a preceding numbering, which can be of any form, like numerals, letters or Romans numerals or even simple bullets.<br><br>

Markup:
<ol>
    <li>first item</li>
    <li>second item</li>
    <li>third item
    <ul>
      <li>sub list item</li>
      <li>sub list item</li>
      <li>sub list item</li>
    </ul>
  </li>
</ol>

Styleguide 1.0.8
*/
ol {
  margin: 0 0 1.5em;
  padding: 0 0 0 2.61793em;
}

/*
# Definition Lists

The HTML &lt;dl&gt; Element (or HTML Description List Element) encloses a list of pairs of terms and descriptions. Common uses for this element are to implement a glossary or to display metadata (a list of key-value pairs). The HTML &lt;dt&gt; element (or HTML Definition Term Element) identifies a term in a definition list. The HTML &lt;dd&gt; Element (or HTML Description Element) indicates the description of a term in a description list (&lt;dl&gt;) element.

Markup:
<dl>
  <dt>Firefox</dt>
  <dd>A free, open source, cross-platform, graphical web browser
      developed by the Mozilla Corporation and hundreds of volunteers.</dd>
</dl>
<!-- Multiple terms, single description -->
<dl>
  <dt>Firefox</dt>
  <dt>Mozilla Firefox</dt>
  <dt>Fx</dt>
  <dd>A free, open source, cross-platform, graphical web browser
      developed by the Mozilla Corporation and hundreds of volunteers.</dd>
</dl>
<!-- Single term, multiple descriptions -->
<dl>
  <dt>Firefox</dt>
  <dd>A free, open source, cross-platform, graphical web browser
      developed by the Mozilla Corporation and hundreds of volunteers.</dd>
  <dd>The Red Panda also known as the Lesser Panda, Wah, Bear Cat or Firefox,
      is a mostly herbivorous mammal, slightly larger than a domestic cat
      (60 cm long).</dd>
</dl>

Styleguide 1.0.9
*/
dl {
  margin: 0 0 1.5em;
}

dt {
  font-weight: bold;
}

dd {
  margin: 0 0 0 2.61793em;
}

/*
# Figure & Figcaption

The HTML &lt;figure&gt; Element represents self-contained content, frequently with a caption (&lt;figcaption&gt;), and is typically referenced as a single unit. While it is related to the main flow, its position is independent of the main flow. Usually this is an image, an illustration, a diagram, a code snippet, or a schema that is referenced in the main text, but that can be moved to another page or to an appendix without affecting the main flow.

Markup:
<!-- Just a figure -->
<figure>
  <img src="http://fpoimg.com/250x210" alt="An awesome picture">
</figure>
<!-- Figure with figcaption -->
<figure>
  <img src="http://fpoimg.com/250x210" alt="An awesome picture">
  <figcaption>Caption for the awesome picture</figcaption>
</figure>

Styleguide 1.1.0
*/
figure {
  border-bottom: 1px dotted #cccccc;
  border-top: 1px dotted #cccccc;
  margin: 1.42857em;
  padding: 1.5em;
  text-align: center;
}

figcaption {
  font-size: 0.78736em;
  line-height: 1.90511;
}

/*
# Standard Links

Your standard hyperlinks. Removed the gray background color from active links in IE 10 by setting background to transparent. However, you can specifiy a background color for each state using the mixin defined below:

Usage:
<pre>a {
  @include link-colors($foreground: 'blue' 'green' 'red', $background: 'black' 'gray' 'white');
}</pre>

Markup:
<a href="#" class="$modifierClass">Example</a>

:hover    - The mouseover state
:active   - The mouse down state

Styleguide 1.1.1
*/
a {
  color: blue;
  background: transparent;
}
a:hover, a:focus {
  color: green;
}
a:active {
  color: red;
}

a:active,
a:hover {
  outline: 0;
}

/*
# Emphasis and Strong

The HTML Strong Element (&lt;strong&gt;) gives text strong importance, and is typically displayed in bold.
The HTML &lt;em&gt; element (or HTML Emphasis Element) marks text that has stress emphasis.

Markup:
<p>When doing x it is <strong>imperative</strong> to do y before proceeding.</p>
<p>In HTML 5, what was previously called <em>block-level</em> content is now called <em>flow</em> content.</p>

Styleguide 1.1.2
*/
b,
strong {
  font-weight: bold;
  line-height: 1em;
}

/*
# Small

The HTML Small Element (&lt;small&gt;) makes the text font size one size smaller (for example, from large to medium, or from small to x-small) down to the browser's minimum font size.  In HTML5, this element is repurposed to represent side-comments and small print, including copyright and legal text, independent of its styled presentation.

Markup: <p>This is the first sentence.  <small>This whole sentence is in small letters.</small></p>

Styleguide 1.1.3
*/
small {
  font-size: 0.78736em;
  line-height: 1.90511;
}

/*
# Quote

The HTML &lt;q&gt; Element (or HTML Quote Element) indicates that the enclosed text is a short inline quotation. This element is intended for short quotations that don't require paragraph breaks; for long quotations use &lt;blockquote&gt; element.

Markup:
<p>Everytime Kenny is killed, Stan will announce
   <q cite="http://en.wikipedia.org/wiki/Kenny_McCormick#Cultural_impact">
     Oh my God, you/they killed Kenny!
   </q>.
</p>

Styleguide 1.1.4
*/
q {
  quotes: "\201C" "\201D";
}

/*
# Definition

The HTML &lt;dfn&gt; element (or HTML Definition Element) represents the defining instance of a term.

Markup:
<p><dfn id="def-internet">The Internet</dfn> is a global system of interconnected networks that use the Internet Protocol Suite (TCP/IP) to serve billions of users worldwide.</p>
<dl>
  <!-- Define "World-Wide Web" and reference definition for "the Internet" -->
  <dt>
    <dfn>
      <abbr title="World-Wide Web">WWW</abbr>
    </dfn>
  </dt>
  <dd>The World-Wide Web (WWW) is a system of interlinked hypertext documents accessed on <a href="#def-internet">the Internet</a>.</dd>
</dl>

Styleguide 1.1.5
*/
dfn {
  font-style: italic;
}

/*
# Abbreviations

The HTML &lt;abbr&gt; Element (or HTML Abbreviation Element) represents an abbreviation and optionally provides a full description for it. If present, the title attribute must contain this full description and nothing else.

Markup:
<p>Tony Blair is the prime minister of the <abbr title="United Kingdom">UK</abbr></p>

Styleguide 1.1.6
*/
abbr {
  text-transform: uppercase;
}

abbr[title] {
  border-bottom: 1px dotted;
}

/*
# Code, Pre, Kbd, Samp

The HTML &lt;code&gt; Element represents a fragment of computer code. By default, it is displayed in the browser's default monospace font.

The HTML &lt;samp&gt; element is an element intended to identify sample output from a computer program. It is usually displayed in the browser's default monotype font (such as Lucida Console).

The HTML &lt;kbd&gt; Element (or HTML Keyboard Input Element) represents user input and produces an inline element displayed in the browser's default monotype font.

Markup:
<p>Regular text. <code>This is code.</code> Regular text.</p>
<p>Regular text. <samp>This is sample text.</samp> Regular text.</p>
<p>Type the following in the Run dialog: <kbd>cmd</kbd><br />Then click the OK button.</p>

Styleguide 1.1.7
*/
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em;
}

p code,
p kbd,
p samp {
  background: #ffeddd;
  border-radius: 4px;
  color: #ff4136;
  font-size: 90%;
  padding: .1em .5em;
  white-space: nowrap;
}

/*
# Subscript and Superscript

The HTML Subscript Element (&lt;sub&gt;) defines a span of text that should be displayed, for typographic reasons, lower, and often smaller, than the main span of text.
The HTML Superscript Element (&lt;sup&gt;) defines a span of text that should be displayed, for typographic reasons, higher, and often smaller, than the main span of text.

Markup:
<p>The chemical formula of water is H<sub>2</sub>O</p>
<p>This text is <sup>superscripted</sup></p>

Styleguide 1.1.8
*/
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sup {
  top: -0.5em;
}

sub {
  bottom: -0.25em;
}

/*
# Mark

The HTML &lt;mark&gt; Element represents highlighted text, i.e., a run of text marked for reference purpose, due to its relevance in a particular context. For example it can be used in a page showing search results to highlight every instance of the searched for word.

Markup:
<p>The &lt;mark&gt; element is used to <mark>highlight</mark> text</p>

Styleguide 1.1.9
*/
mark {
  background: #ffdc00;
  color: #222222;
}

/*
# Images

The HTML &lt;img&gt; Element (or HTML Image Element) represents an image of the document.

Markup:
<img src="http://fpoimg.com/200x252" alt="" />
<a href="https://developer.mozilla.org/" target="_blank"><img src="http://fpoimg.com/200x150?text=Hyperlinked Image" alt="" /></a>

Styleguide 1.2.0
*/
img,
svg {
  vertical-align: middle;
}

img {
  border: 0;
  height: auto;
  image-rendering: -moz-crisp-edges;
  image-rendering: -o-crisp-edges;
  image-rendering: -webkit-optimize-contrast;
  image-rendering: crisp-edges;
  -ms-interpolation-mode: bicubic;
  max-width: 100%;
}

svg:not(:root) {
  overflow: hidden;
}

/*
# Form Buttons

The HTML &lt;button&gt; and &lt;input type="submit" value="Submit" /&gt; element represents a clickable button.

Markup:
<button type="submit" >Submit</button>
<button type="reset" >Reset</button>
<button type="button" >Click me</button>
<input type="submit" value="Submit" />
<input type="reset" value="Reset" />

Styleguide 1.2.1
*/
button,
input,
optgroup,
select,
textarea {
  color: inherit;
  font: inherit;
  margin: 0;
}

button {
  overflow: visible;
}

button,
input[type="submit"],
input[type="reset"] {
  padding: 0 .5em;
}

button,
select {
  text-transform: none;
}

button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */
}

button[disabled],
html input[disabled] {
  color: #999999;
  cursor: default;
}

button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0;
}

/*
# Inputs & Labels

The HTML &lt;input&gt; element is used to create interactive controls for web-based forms.

The HTML &lt;label&gt; Element represents a caption for an item in a user interface. It can be associated with a control either by placing the control element inside the label element, or by using the for attribute. Such a control is called the labeled control of the label element.

We can use the .inline helper class to display the form controls side by side. See the checkbox example.

Markup:
<div><label>Text: <input type="text" name="fn" value=""></label></div>
<div><label for="search">Search: </label><input name="search" type="search" value=""></div>
<div><label for="tel">Tel: </label><input name="tel" type="tel" value=""> <small>Format: AB12 3CD</small></div>
<div><label for="url">URL: </label><input name="url" type="url" value=""></div>
<div><label for="email">Email: </label><input name="email" type="email" value=""> <small>Format: name@host.com</small></div>
<div><label for="pwd">Password: </label><input name="pwd" type="password" value=""></div>
<div><label for="date">Date: </label><input name="date" type="date" value=""></div>
<div><label for="t">Time: </label><input name="t" type="time" value=""></div>
<div><label for="num">Number: </label><input name="num" type="number" value=""></div>
<div><label class="inline">Checkbox1: <input name="check[]" type="checkbox" value="yes"></label> <label class="inline">Checkbox2: <input name="check[]" type="checkbox" value="No"></label></div>
<div><input name="r1" type="radio" value="yes"> <label for="r1" class="inline">Radio1</label> <input name="r1" type="radio" value="No"> <label for="r1" class="inline">Radio2</label></div>
<div><label for="fl">File: </label><input name="fl" type="file"></div>

Styleguide 1.2.2
*/
input[type="date"],
input[type="datetime"],
input[type="datetime-local"],
input[type="email"],
input[type="month"],
input[type="number"],
input[type="password"],
input[type="search"],
input[type="tel"],
input[type="text"],
input[type="time"],
input[type="url"],
input[type="week"] {
  border: 1px solid #cccccc;
  box-shadow: inset 0 2px 5px rgba(204, 204, 204, 0.5);
  display: block;
  line-height: 1.21429;
  padding: 0.07143em 0.21429em;
  outline: 0;
  width: 100%;
}
input[type="date"]:focus,
input[type="datetime"]:focus,
input[type="datetime-local"]:focus,
input[type="email"]:focus,
input[type="month"]:focus,
input[type="number"]:focus,
input[type="password"]:focus,
input[type="search"]:focus,
input[type="tel"]:focus,
input[type="text"]:focus,
input[type="time"]:focus,
input[type="url"]:focus,
input[type="week"]:focus {
  border: 1px solid #0074d9;
  box-shadow: none;
}

input[type="checkbox"],
input[type="radio"] {
  height: 14px;
  padding: 0;
  width: 14px;
}

input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto;
}

input[type="search"] {
  -webkit-appearance: textfield;
}

input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

label {
  display: block;
  font-weight: bold;
  max-width: 100%;
}
label input,
label select,
label textarea {
  font-weight: normal;
}

/*
# Textarea

The HTML &lt;textarea&gt; element represents a multi-line plain-text editing control.

Markup:
<p>If you have any comments, please let us know:</p>
<textarea cols="80" name="comments">You rock!</textarea>

Styleguide 1.2.3
*/
textarea {
  border: 1px solid #cccccc;
  box-shadow: inset 0 2px 5px rgba(204, 204, 204, 0.5);
  display: block;
  height: auto;
  min-height: 7.5em;
  outline: 0;
  overflow: auto;
  resize: vertical;
  width: 100%;
}
textarea:focus {
  border: 1px solid #0074d9;
  box-shadow: none;
}

textarea[rows] {
  height: auto;
}

textarea[cols] {
  width: auto;
}

textarea[contenteditable] {
  -webkit-appearance: none;
}

/*
# Select

The HTML select (&lt;select&gt;) element represents a control that presents a menu of options. The options within the menu are represented by &lt;option&gt; elements, which can be grouped by <optgroup> elements. Options can be pre-selected for the user.

In a Web form, the HTML &lt;optgroup&gt; element  creates a grouping of options within a &lt;select&gt; element.

Markup:
<!-- The second value will be selected initially -->
<select name="select">
  <option value="value1">Value 1</option>
  <option value="value2" selected>Value 2</option>
  <option value="value3">Value 3</option>
</select>
<!-- Select with optgroup -->
<select>
  <optgroup label="Group 1">
    <option>Option 1.1</option>
  </optgroup>
  <optgroup label="Group 2">
    <option>Option 2.1</option>
    <option>Option 2.2</option>
  </optgroup>
  <optgroup label="Group 3" disabled>
    <option>Option 3.1</option>
    <option>Option 3.2</option>
    <option>Option 3.3</option>
  </optgroup>
</select>
<!-- Multiple Select -->
<select name="select" multiple>
  <option value="value1">Value 1</option>
  <option value="value2" selected>Value 2</option>
  <option value="value3">Value 3</option>
</select>

Styleguide 1.2.4
*/
optgroup {
  font-weight: bold;
}

select {
  border: 1px solid #cccccc;
  display: block;
  height: 1.35714em;
  outline: 0;
  width: 100%;
}
select:hover {
  background-color: #f6fbff;
  border-color: #0074d9;
}
select[multiple] {
  height: auto;
}

/*
# Fieldset and Legends

The HTML &lt;fieldset&gt; element is used to group several controls as well as labels (&lt;label&gt;) within a web form.

The HTML &lt;legend&gt; Element (or HTML Legend Field Element) represents a caption for the content of its parent &lt;fieldset&gt;.

Markup:
<fieldset>
  <legend>Title</legend>
  <input type="radio" name="radio" id="radio"> <label for="radio" class="inline">Click me</label>
</fieldset>
<fieldset>
  <legend>More Info</legend>
  <label for="info">Info</label>
  <input type="text" name="info" id="info">
</fieldset>

Styleguide 1.2.5
*/
fieldset {
  border: 0;
  margin: 0 0 1.5em;
  padding: 1.5em;
}
fieldset > :last-child {
  margin-bottom: 0;
}

legend {
  border: 0;
  border-bottom: 1px solid #cccccc;
  display: block;
  font-size: 1.618em;
  line-height: 1.85414;
  margin-bottom: 0.88292em;
  padding: 0;
  width: 100%;
}

/*
# Table

The HTML Table Element (&lt;table&gt;) represents data in two dimensions or more.

The HTML &lt;caption&gt; Element (or HTML Table Caption Element) represents the title of a table. Though it is always the first descendant of a &lt;table&gt;, its styling, using CSS, may place it elsewhere, relative to the table.

Markup:
<p>Table with thead, tfoot, tbody, and caption</p>
<table>
  <caption>Awesome caption (Table title)</caption>
  <thead>
    <tr>
      <th>Header content 1</th>
      <th>Header content 2</th>
    </tr>
  </thead>
  <tfoot>
    <tr>
      <td>Footer content 1</td>
      <td>Footer content 2</td>
    </tr>
  </tfoot>
  <tbody>
    <tr>
      <td>Body content 1</td>
      <td>Body content 2</td>
    </tr>
  </tbody>
</table>

Styleguide 1.2.6
*/
table {
  border-collapse: collapse;
  border-spacing: 0;
  margin: 0 0 1.5em;
  width: 100%;
}

td,
th {
  vertical-align: top;
}

th {
  font-weight: bold;
  text-align: center;
}

caption {
  text-align: left;
}

tfoot td {
  text-align: center;
}

.grid__row:before, .menu:before, .menu-right:before, .menu-center:before, .menu-justified:before, .menu-stacked:before, .clearfix:before, .grid__row:after, .menu:after, .menu-right:after, .menu-center:after, .menu-justified:after, .menu-stacked:after, .clearfix:after {
  content: ' ';
  display: table;
}
.grid__row:after, .menu:after, .menu-right:after, .menu-center:after, .menu-justified:after, .menu-stacked:after, .clearfix:after {
  clear: both;
}

.menu, .menu-right, .menu-center, .menu-justified, .menu-stacked, .sub-menu, .pagination, .unstyled-list {
  list-style: none;
  margin: 0;
  padding: 0;
}

.menu__item > a, .menu-right__item > a, .menu-center__item > a, .menu-justified__item > a, .menu-stacked__item > a, .sub-menu a, .pagination__item a {
  display: block;
  text-decoration: none;
}

.inline {
  display: inline-block;
  width: auto;
}

/*
# Grid

Styleguide 2
*/
/*
# Grid Container

This mixin defines the max width of the page and is used in context with setting column widths within the layout.

<pre>.grid {
  @include grid($site-width);
}</pre>

Markup:
<div class="grid">.grid</div>

Styleguide 2.0.1
*/
.grid__col {
  float: left;
  position: relative;
}

.grid {
  width: 95%;
  margin: 0 auto;
}
@media screen and (min-width: 48em) {
  .grid {
    max-width: 71.25em;
  }
}

/*
# Grid Row

This mixin defines rows within the layout. Its used to clear column floats.

<pre>.grid__row {
  @include grid-row();
}</pre>

Markup:
<div class="grid">
  <div class="grid__row">.grid__row</div>
</div>

Styleguide 2.0.2
*/
/*
# Grid Column

This mixin defines columns within a row. The <code>%grid-col</code> placeholder is used to group common styles for all columns.

<pre>.grid__col {
  @extend %grid-col;
}
.grid__col-1 {
  @include grid-col($span: 1, $columns: $mobile-columns, $gutter: right, $gutter-size: $mobile-gutter);
}
.grid__col-3 {
  @include grid-col($span: 3, $columns: $mobile-columns, $gutter: left, $gutter-size: $mobile-gutter);
}</pre>

Markup:
<div class="grid">
  <div class="grid__row">
    <div class="grid__col grid__col--1">
      .grid__col--1
    </div>
    <div class="grid__col grid__col--3">
      .grid__col--3
    </div>
  </div>
</div>

Styleguide 2.0.3
*/
.grid__col--1 {
  width: 25%;
  padding: 0 10px 0 0;
}

.grid__col--3 {
  width: 75%;
  padding: 0 0 0 10px;
}

/*
# Grid Column Ordering

This mixin defines column positioning commonly used for source ordering content.

<pre>.primary {
  @include grid-col-order($direction: left, $span: 3, $columns: $mobile-columns);
}
.secondary {
  @include grid-col-order($direction: right, $span: 1, $columns: $mobile-columns);
}</pre>

Markup:
<div class="grid">
  <div class="grid__row">
    <div class="grid__col grid__col--1 primary">
      .primary
    </div>
    <div class="grid__col grid__col--3 secondary">
      .secondary
    </div>
  </div>
</div>

Styleguide 2.0.4
*/
.primary {
  left: 75%;
}

.secondary {
  right: 25%;
}

/*
# Grid Column Offsets

This mixin defines column offsets using left and right margins.

<pre>.grid__col-offset-right--1 {
  @include grid-col-offset($direction: right, $span: 1, $columns: $mobile-columns);
}
.grid__col-offset-left--1 {
  @include grid-col-offset($direction: left, $span: 1, $columns: $mobile-columns);
}</pre>

Markup: <div class="grid">
  <div class="grid__row">
    <div class="grid__col grid__col--1 grid__col-offset-left--1">
      .offset-left
    </div>
    <div class="grid__col grid__col--1 grid__col-offset-right--1">
      .offset-right
    </div>
  </div>
</div>

Styleguide 2.0.5
*/
.grid__col-offset-right--1 {
  margin-right: 25%;
}

.grid__col-offset-left--1 {
  margin-left: 25%;
}

/*
# Menu

Styleguide 3
*/
/*
# Default Menu

These mixins defines the styles necessary for the top level navigation module. The <code>%unstyled-list</code> placeholder is used to reset the styles of list markup and can be reused for sub menus.

<pre>.menu {
  @extend %unstyled-list;
  @include menu();
}
.menu__item {
  @include menu-item();
  & > a {
    @extend %block-link;
    padding: .75em;
    @include link-colors($foreground: 'purple' 'yellow' 'yellow', $background: '#e0774c' 'blue' 'purple');
  }
}</pre>

Markup:
<nav role="navigation">
  <ul class="menu">
    <li class="menu__item"><a href="#">Item 1</a></li>
    <li class="menu__item"><a href="#">Item 2</a></li>
    <li class="menu__item"><a href="#">Item 3</a></li>
    <li class="menu__item"><a href="#">Item 4</a></li>
    <li class="menu__item"><a href="#">Item 5</a></li>
  </ul>
</nav>

Styleguide 3.0.1
*/
.menu__item {
  position: relative;
  display: block;
  float: left;
}
.menu__item > a {
  padding: .75em;
  background-color: #e0774c;
  color: purple;
}
.menu__item > a:hover, .menu__item > a:focus {
  background-color: blue;
  color: yellow;
}
.menu__item > a:active {
  background-color: purple;
  color: yellow;
}

/*
# Right Menu

Right aligned menu.

<pre>.menu-right {
  @extend %unstyled-list;
  @include menu($align: right);
}
.menu-right__item {
  @include menu-item();
  & > a {
    @extend %block-link;
    padding: .75em;
    @include link-colors($foreground: 'purple' 'yellow' 'yellow', $background: '#e0774c' 'blue' 'purple');
  }
}</pre>

Markup:
<nav role="navigation">
  <ul class="menu-right">
    <li class="menu-right__item"><a href="#">Item 1</a></li>
    <li class="menu-right__item"><a href="#">Item 2</a></li>
    <li class="menu-right__item"><a href="#">Item 3</a></li>
    <li class="menu-right__item"><a href="#">Item 4</a></li>
    <li class="menu-right__item"><a href="#">Item 5</a></li>
  </ul>
</nav>

Styleguide 3.0.2
*/
.menu-right {
  display: table;
  margin-left: auto;
}

.menu-right__item {
  position: relative;
  display: block;
  float: left;
}
.menu-right__item > a {
  padding: .75em;
  background-color: #e0774c;
  color: purple;
}
.menu-right__item > a:hover, .menu-right__item > a:focus {
  background-color: blue;
  color: yellow;
}
.menu-right__item > a:active {
  background-color: purple;
  color: yellow;
}

/*
# Center Menu

Center aligned menu.

<pre>.menu-center {
  @extend %unstyled-list;
  @include menu($align: center);
}
.menu-center__item {
  @include menu-item();
  & > a {
    @extend %block-link;
    padding: .75em;
    @include link-colors($foreground: 'purple' 'yellow' 'yellow', $background: '#e0774c' 'blue' 'purple');
  }
}</pre>

Markup:
<nav role="navigation">
  <ul class="menu-center">
    <li class="menu-center__item"><a href="#">Item 1</a></li>
    <li class="menu-center__item"><a href="#">Item 2</a></li>
    <li class="menu-center__item"><a href="#">Item 3</a></li>
    <li class="menu-center__item"><a href="#">Item 4</a></li>
    <li class="menu-center__item"><a href="#">Item 5</a></li>
  </ul>
</nav>

Styleguide 3.0.3
*/
.menu-center {
  display: table;
  margin-left: auto;
  margin-right: auto;
}

.menu-center__item {
  position: relative;
  display: block;
  float: left;
}
.menu-center__item > a {
  padding: .75em;
  background-color: #e0774c;
  color: purple;
}
.menu-center__item > a:hover, .menu-center__item > a:focus {
  background-color: blue;
  color: yellow;
}
.menu-center__item > a:active {
  background-color: purple;
  color: yellow;
}

/*
# Justified Menu

Justified menu that spans accross entire width and has equal width menu items.

<pre>.menu-justified {
  @extend %unstyled-list;
  @include menu($align: justified);
}
.menu-justified__item {
  @include menu-item($align: justified, $num: 5);
  & > a {
    @extend %block-link;
    padding: .75em;
    @include link-colors($foreground: 'purple' 'yellow' 'yellow', $background: '#e0774c' 'blue' 'purple');
  }
}</pre>

Markup:
<nav role="navigation">
  <ul class="menu-justified">
    <li class="menu-justified__item"><a href="#">Item 1</a></li>
    <li class="menu-justified__item"><a href="#">Item 2</a></li>
    <li class="menu-justified__item"><a href="#">Item 3</a></li>
    <li class="menu-justified__item"><a href="#">Item 4</a></li>
    <li class="menu-justified__item"><a href="#">Item 5</a></li>
  </ul>
</nav>

Styleguide 3.0.4
*/
.menu-justified {
  display: table;
  width: 100%;
}

.menu-justified__item {
  position: relative;
  display: table-cell;
  text-align: center;
  float: none;
  width: 20%;
}
.menu-justified__item > a {
  padding: .75em;
  background-color: #e0774c;
  color: purple;
}
.menu-justified__item > a:hover, .menu-justified__item > a:focus {
  background-color: blue;
  color: yellow;
}
.menu-justified__item > a:active {
  background-color: purple;
  color: yellow;
}

/*
# Stacked Menu

Vertically stacked menu items.

<pre>.menu-stacked {
  @extend %unstyled-list;
  @include menu();
}
.menu-stacked__item {
  @include menu-item(stacked);
  & > a {
    @extend %block-link;
    padding: .75em;
    @include link-colors($foreground: 'purple' 'yellow' 'yellow', $background: '#e0774c' 'blue' 'purple');
  }
}</pre>

Markup:
<nav role="navigation">
  <ul class="menu-stacked">
    <li class="menu-stacked__item"><a href="#">Item 1</a></li>
    <li class="menu-stacked__item"><a href="#">Item 2</a></li>
    <li class="menu-stacked__item"><a href="#">Item 3</a></li>
    <li class="menu-stacked__item"><a href="#">Item 4</a></li>
    <li class="menu-stacked__item"><a href="#">Item 5</a></li>
  </ul>
</nav>

Styleguide 3.0.5
*/
.menu-stacked__item {
  position: relative;
  display: block;
}
.menu-stacked__item > a {
  padding: .75em;
  background-color: #e0774c;
  color: purple;
}
.menu-stacked__item > a:hover, .menu-stacked__item > a:focus {
  background-color: blue;
  color: yellow;
}
.menu-stacked__item > a:active {
  background-color: purple;
  color: yellow;
}

/*
# Sub Menu

Styleguide 4
*/
.sub-menu__item {
  display: block;
  position: relative;
  width: inherit;
}

/*
# Sub Menu

These mixins defines the styles necessary to create dropdown and flyout sub menus. The <code>%unstyled-list</code> placeholder is used to reset the default list styles. The <code>%sub-menu-item</code> placeholder contains styles for the sub menu items. The <code>%block-link</code> placeholder contains styles to display hyperlinks as blocks.

<pre>.sub-menu {
  @extend %unstyled-list;
  @include sub-menu($width: 10em, $position: true);

  a {
    @extend %block-link;
    padding: .75em;
    @include link-colors($foreground: 'orange' 'red' 'green', $background: 'blue' 'green' 'red');
  }
}
.sub-menu__item {
  @extend %sub-menu-item;

  &:hover {
    & > .sub-menu {
      @include sub-menu-state($active: true, $flyout: true);
    }
  }
}
.menu__item {
  &:hover {
    & > .sub-menu {
      @include sub-menu-state($active: true, $flyout: false);
    }
  }
}</pre>

Markup:
<nav role="navigation">
  <ul class="menu">
    <li class="menu__item"><a href="#">Item 1</a></li>
    <li class="menu__item"><a href="#">Item 2</a></li>
    <li class="menu__item"><a href="#">Item 3</a></li>
    <li class="menu__item"><a href="#">Item 4</a>
      <ul class="sub-menu">
        <li class="sub-menu__item"><a href="#">Sub Menu Item 1</a></li>
        <li class="sub-menu__item"><a href="#">Sub Menu Item 2</a></li>
        <li class="sub-menu__item"><a href="#">Sub Menu Item 3</a></li>
        <li class="sub-menu__item"><a href="#">Sub Menu Item 4</a>
        <ul class="sub-menu">
          <li class="sub-menu__item"><a href="#">Sub Menu Item 1</a></li>
          <li class="sub-menu__item"><a href="#">Sub Menu Item 2</a></li>
          <li class="sub-menu__item"><a href="#">Sub Menu Item 3</a></li>
          <li class="sub-menu__item"><a href="#">Sub Menu Item 4</a></li>
          <li class="sub-menu__item"><a href="#">Sub Menu Item 5</a></li>
        </ul>
        </li>
        <li class="sub-menu__item"><a href="#">Sub Menu Item 5</a></li>
      </ul>
    </li>
    <li class="menu__item"><a href="#">Item 5</a></li>
  </ul>
</nav>

Styleguide 4.0.1
*/
.sub-menu {
  left: -9999px;
  position: absolute;
  z-index: 999;
  width: 10em;
}
.sub-menu a {
  padding: .75em;
  background-color: blue;
  color: orange;
}
.sub-menu a:hover, .sub-menu a:focus {
  background-color: green;
  color: red;
}
.sub-menu a:active {
  background-color: red;
  color: green;
}

.sub-menu__item:hover > .sub-menu {
  top: 0;
  left: 100%;
}

.menu__item:hover > .sub-menu {
  left: 0;
}

/*
# Button

Styleguide 5
*/
.button,
input.button {
  background-image: none;
  -webkit-border-image: none;
          border-image: none;
  border: 0;
  cursor: pointer;
  display: inline-block;
  font-style: normal;
  font-weight: normal;
  position: relative;
  text-align: center;
  text-decoration: none;
  text-transform: none;
  -webkit-transition: background 40ms ease-out, color 40ms ease-out, box-shadow 40ms ease-out;
          transition: background 40ms ease-out, color 40ms ease-out, box-shadow 40ms ease-out;
  -webkit-user-select: none;
     -moz-user-select: none;
      -ms-user-select: none;
          user-select: none;
  white-space: nowrap;
  -webkit-appearance: none;
  -webkit-user-drag: none;
}
.button:hover, .button:focus {
  background-image: -webkit-linear-gradient(top, rgba(255, 255, 255, 0), rgba(0, 0, 0, 0.15));
  background-image: linear-gradient(to bottom, rgba(255, 255, 255, 0), rgba(0, 0, 0, 0.15));
  box-shadow: 1px 1px 1px rgba(0, 0, 0, 0.2);
}
.button:active {
  background-image: -webkit-linear-gradient(bottom, rgba(255, 255, 255, 0), rgba(0, 0, 0, 0.15));
  background-image: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 0, 0, 0.15));
  box-shadow: inset 0 0 2px rgba(0, 0, 0, 0.5);
}

/*
# Button

Button mixins for defining button size and colors. The <code>%button</code> placeholder contains required styles that a button needs. Both mixins and placeholder are required.

<pre>.button,
input.button {
  @extend %button;
  @include button($colors: (background-color: $blue, color: $orange), $size: $base-font-size, $lines: 1);
  width: 100%;

  @media screen and (min-width: $small-screen) {
    width: auto;
  }
}
.button--xlarge,
input.button--xlarge {
  @include button($colors: false, $size: $h2-font-size, $lines: 3);
}
.button--large,
input.button--large {
  @include button($colors: false, $size: $large-font-size, $lines: 2);
}
.button--primary,
input.button--primary {
  @include button($colors: (background-color: $orange, color: $blue), $size: false, $lines: false);
}</pre>

Markup:
<a href="#" class="button $modifierClass">Link Element</a>
<input type="submit" name="submit" value="Input Element" class="button $modifierClass">
<button class="button $modifierClass">Button Element</button>

.button--xlarge    - The extra large button
.button--large     - The large button
.button--primary   - The primary button

Styleguide 5.0.1
*/
.button,
input.button {
  background-color: #0074d9;
  color: #ff851b;
  font-size: 1em;
  line-height: 1.5;
  height: 1.5em;
  padding-left: 1em;
  padding-right: 1em;
  width: 100%;
}
.button:hover, .button:focus,
input.button:hover,
input.button:focus {
  background-color: #0050d9;
  color: #ffab1b;
}
.button:active,
input.button:active {
  background-color: #003ed9;
  color: #ffbe1b;
}
@media screen and (min-width: 48em) {
  .button,
  input.button {
    width: auto;
  }
}

.button--xlarge,
input.button--xlarge {
  font-size: 2.06121em;
  line-height: 2.18318;
  height: 2.18318em;
  padding-left: 2.06121em;
  padding-right: 2.06121em;
}

.button--large,
input.button--large {
  font-size: 1.27393em;
  line-height: 2.35492;
  height: 2.35492em;
  padding-left: 1.27393em;
  padding-right: 1.27393em;
}

.button--primary,
input.button--primary {
  background-color: #ff851b;
  color: #0074d9;
}
.button--primary:hover, .button--primary:focus,
input.button--primary:hover,
input.button--primary:focus {
  background-color: #ffab1b;
  color: #0050d9;
}
.button--primary:active,
input.button--primary:active {
  background-color: #ffbe1b;
  color: #003ed9;
}

/*
# Form

Styleguide 6
*/
.form-control,
input.form-control {
  -webkit-transition: border 500ms ease, background 500ms ease, box-shadow 500ms ease;
          transition: border 500ms ease, background 500ms ease, box-shadow 500ms ease;
}

.form-control-addon {
  position: relative;
}

.form-control-addon__label {
  bottom: 0;
  display: block;
  position: absolute;
  text-align: center;
  top: 0;
  z-index: 0;
}

.form-control-addon__field,
input.form-control-addon__field {
  position: relative;
  z-index: 1;
}

/*
# Form Controls

The form control mixin defines the styles for form controls. The <code>%form-control</code> placeholder contains common styles for form controls. Both are required.

<pre>
.form-control,
input.form-control {
  @extend %form-control;
  @include form-control($size: xlarge);
  @include form-control-focus-color($color: $blue);
}
.form-control--textarea {
  @include form-control($size: xlarge, $textarea: true);
}
.form-row,
.form-col {
  margin-bottom: rhythm();
}
.title,
.nickname,
.state,
.comments {
  @include grid-col(2, 2, left);
}
.first-name,
.last-name {
  @include grid-col(1, 2, left);
}

@media screen and (min-width: $small-screen) {
  .form-control,
  input.form-control {
    @include form-control($size: normal);
  }
  .form-control--textarea {
    @include form-control($size: normal, $textarea: true);
  }
  .title,
  .state {
    @include grid-col(3, 9, right, $desktop-gutter);
  }
  .first-name,
  .last-name,
  .nickname {
    @include grid-col(3, 9, right, $desktop-gutter);
  }
  .comments {
    @include grid-col(6, 9, right, $desktop-gutter);
  }
}</pre>

Markup:
<form action="" method="get" role="form">
  <div class="grid__row form-row">
    <div class="grid__col form-col first-name">
      <label for="first_name">First Name</label>
      <input type="text" name="first_name" placeholder="first name" class="form-control" />
    </div>
    <div class="grid__col form-col last-name">
      <label for="last_name">Last Name</label>
      <input type="text" name="last_name" placeholder="last name" class="form-control" />
    </div>
    <div class="grid__col form-col nickname">
        <label for="nickname">Nickname</label>
          <input type="text" name="nickname" placeholder="nickname" class="form-control" />
    </div>
  </div>
  <div class="grid__row form-row">
    <div class="grid__col form-col state">
      <label for="state">State</label>
      <select name="state" class="form-control">
        <option value="alabama">AL</option>
        <option value="alaska">AK</option>
        <option value="arizona">AR</option>
        <option value="california">CA</option>
      </select>
    </div>
  </div>
  <div class="grid__row form-row">
    <div class="grid__col form-col comments">
      <label for="comments">Comments</label>
      <textarea name="comments" placeholder="comments" class="form-control--textarea"></textarea>
    </div>
  </div>
</form>

Styleguide 6.0.1
*/
.form-control,
input.form-control {
  font-size: 1.27393em;
  height: 2.35492em;
  padding: 0.64286em;
}
.form-control:focus,
input.form-control:focus {
  background-color: #f6fbff;
  border-color: #6dbbff;
  box-shadow: 0 0 5px rgba(0, 116, 217, 0.6);
}

.form-control--textarea {
  font-size: 1.27393em;
  min-height: 11.7746em;
  padding: 0.64286em;
}

.form-row,
.form-col {
  margin-bottom: 1.5em;
}

.title,
.nickname,
.state,
.comments {
  width: 100%;
  padding: 0 0 0 10px;
}

.first-name,
.last-name {
  width: 50%;
  padding: 0 0 0 10px;
}

@media screen and (min-width: 48em) {
  .form-control,
  input.form-control {
    font-size: 1em;
    height: 1.5em;
    padding: 0.21429em;
  }

  .form-control--textarea {
    font-size: 1em;
    min-height: 15em;
    padding: 0.5em;
  }

  .title,
  .state {
    width: 33.33333%;
    padding: 0 17.835px 0 0;
  }

  .first-name,
  .last-name,
  .nickname {
    width: 33.33333%;
    padding: 0 17.835px 0 0;
  }

  .comments {
    width: 66.66667%;
    padding: 0 17.835px 0 0;
  }
}
/*
# Form Control Addons

The form control addon mixin defines the styles for prefixed or appended label addons. The <code>%form-control-addon</code> placeholder contains common styles used for addons. Both are required.

<pre>.form-control-addon {
  @extend %form-control-addon;
}
.form-control-addon__label {
  @extend %form-control-addon-label;
  @include form-control-addon-label-size($size: xlarge);
  @include form-control-addon-label-color($background: $dark-gray, $foreground: $light-gray);

  @media screen and (min-width: $small-screen) {
    @include form-control-addon-label-size($size: normal);
  }
}
.form-control-addon__field,
input.form-control-addon__field {
  @extend %form-control-addon-input;
}
.form-control-addon--prepend {
  @include form-control-addon($label-class: form-control-addon__label, $side: left, $width: 75px);
}
.form-control-addon--append {
  @include form-control-addon($label-class: form-control-addon__label, $side: right, $width: 75px);
}</pre>

Markup:
<form action="" method="get" role="form">
  <div class="grid__row form-row">
    <div class="grid__col form-col url">
      <label for="url">Website</label>
      <div class="form-control-addon form-control-addon--prepend">
        <span class="form-control-addon__label">http://</span>
        <input type="text" name="url" placeholder="website address" class="form-control form-control-addon__field" />
      </div>
    </div>
  </div>
  <div class="grid__row form-row">
    <div class="grid__col form-col donate">
      <label for="donate">Amount</label>
      <div class="form-control-addon form-control-addon--append">
        <span class="form-control-addon__label">.00</span>
        <input type="number" name="donate" placeholder="10" class="form-control form-control-addon__field" />
      </div>
    </div>
  </div>
</form>

Styleguide 6.0.2
*/
.form-control-addon__label {
  font-size: 1.27393em;
  line-height: 2.35492;
  background-color: #666666;
  color: #cccccc;
}
@media screen and (min-width: 48em) {
  .form-control-addon__label {
    font-size: 1em;
    line-height: 1.5;
  }
}

.form-control-addon--prepend {
  padding-left: 75px;
}
.form-control-addon--prepend .form-control-addon__label {
  left: 0;
  width: 75px;
}

.form-control-addon--append {
  padding-right: 75px;
}
.form-control-addon--append .form-control-addon__label {
  right: 0;
  width: 75px;
}

.url,
.donate {
  width: 100%;
  padding: 0 0 0 10px;
}

/*
# Media

Styleguide 7
*/
.media {
  margin-bottom: 1.5em;
  overflow: auto;
}

.media__element {
  line-height: 0;
}

.media__content > :first-child {
  margin-top: 0;
}
.media__content > :last-child {
  margin-bottom: 0;
}

/*
# Media Object

The media-element mixin defines the styles necessary to layout media along side text. The <code>%media</code> placeholder contains common styles for media blocks. The <code>%media-element</code> placeholder contains common styles for media elements. The <code>%media-content</code> placeholder contains common styles used for all media content. All placeholers and mixins are required.

<pre>.media {
  @extend %media;
}
.media__element {
  @extend %media-element;
  @include media-element(none, 150px);

  @media screen and (min-width: $small-screen) {
    @include media-element();
  }
}
.media__content {
  @extend %media-content;
}</pre>

Markup: <div class="media">
  <div class="media__element"><img src="http://fpoimg.com/150x125?text=Preview" alt=""></div>
  <div class="media__content">
    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
    tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,
    quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo
    consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse
    cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non
    proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>
  </div>
</div>

Styleguide 7.0.1
*/
.media__element {
  float: none;
  margin-left: auto;
  margin-right: auto;
  width: 150px;
}
@media screen and (min-width: 48em) {
  .media__element {
    float: left;
    margin-right: 1em;
    width: 150px;
  }
}

/*
# Alert

Styleguide 8
*/
/*
# Default Alert

The alert mixin defines the base styles for a typical alert or validation message.

Usage:
<pre>.alert {
  @include alert($border: 1px, $color: false);
}
.alert--notice {
  @include alert($border: false, $color: $blue);
}
.alert--error {
  @include alert($border: false, $color: $red);
}
.alert--success {
  @include alert($border: false, $color: $green);
}
.alert--warning {
  @include alert($border: false, $color: $yellow);
}</pre>

Markup:
<div class="alert $modifierClass">
  <p>This is an alert.</p>
</div>

.alert--notice    - The notice alert.
.alert--error     - The error alert.
.alert--warning   - The warning alert.
.alert--success   - The success alert.

Styleguide 8.0.1
*/
.alert {
  border-width: 1px;
  border-style: solid;
  padding: 1.42857em 1em !important;
}
.alert > :last-child {
  margin-bottom: 0;
}

.alert--notice {
  background-color: #c4e4ff;
  border-color: #0074d9;
  color: #0074d9;
}
.alert--notice > :last-child {
  margin-bottom: 0;
}

.alert--error {
  background-color: #ffd9d7;
  border-color: #ff4136;
  color: #ff4136;
}
.alert--error > :last-child {
  margin-bottom: 0;
}

.alert--success {
  background-color: #d5f5d8;
  border-color: #2ecc40;
  color: #2ecc40;
}
.alert--success > :last-child {
  margin-bottom: 0;
}

.alert--warning {
  background-color: #fff8cc;
  border-color: #ffdc00;
  color: #ffdc00;
}
.alert--warning > :last-child {
  margin-bottom: 0;
}

/*
# Columns

Styleguide 9
*/
.columns {
  orphans: 2;
  widows: 2;
}

/*
# Columns

The Column mixin contains the styles to apply multiple columns of text on an block element. The <code>%column</code> placeholder is used to add widow and orphan control to the columns. Both are required.

<pre>.columns {
  @extend %column;
  @include column($count: 1, $gap: false, $rule: false);
  @media screen and (min-width: $small-screen) {
    @include column($count: 4, $gap: $column-gap, $rule: true);
  }
}</pre>

Markup:
<div class="columns">
  <p>Aenean lacinia bibendum nulla sed consectetur. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Donec sed odio dui. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Sed posuere consectetur est at lobortis. Donec sed odio dui.</p>
  <p>Sed posuere consectetur est at lobortis. Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>
  <p>Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Maecenas sed diam eget risus varius blandit sit amet non magna. Nullam id dolor id nibh ultricies vehicula ut id elit. Nullam id dolor id nibh ultricies vehicula ut id elit.</p>
  <p>Vestibulum id ligula porta felis euismod semper. Etiam porta sem malesuada magna mollis euismod. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Maecenas faucibus mollis interdum. Cras mattis consectetur purus sit amet fermentum. Maecenas sed diam eget risus varius blandit sit amet non magna. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit.</p>
</div>

Styleguide 9.0.1
*/
.columns {
  -webkit-column-count: 1;
     -moz-column-count: 1;
          column-count: 1;
}
@media screen and (min-width: 48em) {
  .columns {
    -webkit-column-count: 4;
       -moz-column-count: 4;
            column-count: 4;
    -webkit-column-gap: 1.618em;
       -moz-column-gap: 1.618em;
            column-gap: 1.618em;
    -webkit-column-rule: 1px solid #222222;
       -moz-column-rule: 1px solid #222222;
            column-rule: 1px solid #222222;
  }
}

/*
# Grid Blocks

Styleguide 10
*/
.grid-block {
  display: inline-block;
  margin-bottom: 1.5em;
  margin-right: -4px;
  vertical-align: top;
}
.grid-block > :last-child {
  margin-bottom: 0;
}

/*
# Grid Block

The grid block mixin contains the styles needed to create fixed width inline block elements that are laid out in a grid format. The <code>%grid-block</code> placeholder contains the base styles for the grid blocks. Both are required.

<pre>.grid-block {
  @extend %grid-block;
  @include grid-block($container-width: 320px, $columns: 2, $gutter: $mobile-gutter);

  @media screen and (min-width: $small-screen) {
    @include grid-block($container-width: 800px, $columns: 4, $gutter: $desktop-gutter);
  }
}</pre>

Markup:
<div class="grid-block"><img src="http://fpoimg.com/200x200"></div>
<div class="grid-block"><img src="http://fpoimg.com/200x200"></div>
<div class="grid-block"><img src="http://fpoimg.com/200x200"></div>
<div class="grid-block"><img src="http://fpoimg.com/200x200"></div>

Styleguide 10.0.1
*/
.grid-block {
  padding-left: 10px;
  padding-right: 10px;
  width: 160px;
}
@media screen and (min-width: 48em) {
  .grid-block {
    padding-left: 17.835px;
    padding-right: 17.835px;
    width: 200px;
  }
}

/*
# Label

Styleguide 11
*/
.label {
  display: inline-block;
  vertical-align: middle;
}

/*
# Default Label

The label mixin contains the styles needed to create inline labels. The <code>%label</code> placeholder contains the base styles for the labels. Both are required.

<pre>.label {
  @extend %label;
  @include label($size: $base-font-size, $lines: 1, $colors: (background-color: $light-gray, color: $dark-gray));
}
.label--large {
  @include label($size: $large-font-size, $lines: 2, $colors: false);
}
.label--xlarge {
  @include label($size: $h3-font-size, $lines: 2, $colors: false);
  border-radius: 5px;
}</pre>

Markup:
<p>Sample text. <span class="label $modifierClass">new</span></p>

.label--large   - large label
.label--xlarge  - extra large label

Styleguide 11.0.1
*/
.label {
  background-color: #cccccc;
  color: #666666;
  font-size: 1em;
  line-height: 1.5;
  padding-left: 0.5em;
  padding-right: 0.5em;
}

.label--large {
  font-size: 1.27393em;
  line-height: 2.35492;
  padding-left: 0.63696em;
  padding-right: 0.63696em;
}

.label--xlarge {
  font-size: 1.618em;
  line-height: 1.85414;
  padding-left: 0.809em;
  padding-right: 0.809em;
  border-radius: 5px;
}

/*
# Gray Box

Styleguide 12
*/
.gray-box {
  text-align: center;
}

/*
# Default Gray Box

The gray box mixins is used to create gray boxes for the purpose of building HTML wireframes. The <code>%gray-box</code> placeholder contains the base styles for the for the gray boxes. All are required.

<pre>.gray-box {
  @extend %gray-box;
  @include gray-box($lines: 4, $colors: (background-color: $blue, color: $orange));
}
.gray-box--large {
  @include gray-box($lines: 8, $colors: false);
}
.gray-box--xlarge {
  @include gray-box($lines: 16, $colors: false);
}
.gray-box--xxlarge {
  @include gray-box($lines: 32, $colors: false);
}
.gray-box--dark {
  @include gray-box($lines: false, $colors: (background-color: $dark-gray, color: $light-gray));
}
.gray-box--light {
  @include gray-box($lines: false, $colors: (background-color: $light-gray, color: $gray));
}</pre>

Markup:
<div class="gray-box $modifierClass">Gray Box</div>

.gray-box--large - large graybox
.gray-box--xlarge - extra large graybox
.gray-box--xxlarge - double extra large graybox
.gray-box--dark - dark graybox
.gray-box--light - light graybox

Styleguide 12.0.1
*/
.gray-box {
  line-height: 6;
  background-color: #6d6d6d;
  color: #8d8d8d;
}

.gray-box--large {
  line-height: 12;
}

.gray-box--xlarge {
  line-height: 24;
}

.gray-box--xxlarge {
  line-height: 48;
}

.gray-box--dark {
  background-color: #666666;
  color: #cccccc;
}

.gray-box--light {
  background-color: #cccccc;
  color: #999999;
}

/*
# Icon

Styleguide 13
*/
.icon {
  display: inline-block;
  font-style: normal;
  font-weight: normal;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

/*
# Icon

The icon mixin is used to create inline icons for buttons, nav items, labels, or whatever your heart desires. The <code>%icon</code> placeholder contains the base styles for the icons. The icon-content mixin is used to pass in the unicode content of a specific icon. All are required.

<pre>.icon {
  @extend %icon;
  @include icon($font: fontawesome, $content: false);
  @include icon-style($color: $blue, $size: $base-font-size, $valign: 0%);
}
.icon--xlarge {
  @include icon-style($color: false, $size: 24px, $valign: -8%);
}
.icon--large {
  @include icon-style($color: false, $size: 18px, $valign: -6%);
}
.icon--contrast {
  @include icon($font: false, $content: '\f042');
}
.icon--envelope {
  @include icon($font: false, $content: '\f003');
}</pre>

Markup:
<span class="icon icon--envelope $modifierClass"></span> Text here.

.icon--xlarge  - extra large icon
.icon--large   - large icon

Styleguide 13.0.1
*/
.icon {
  font-family: fontawesome;
  color: #0074d9;
  font-size: 1em;
  line-height: 1.5;
  vertical-align: 0%;
}

.icon--xlarge {
  font-size: 1.71429em;
  line-height: 1.75;
  vertical-align: -8%;
}

.icon--large {
  font-size: 1.28571em;
  line-height: 1.16667;
  vertical-align: -6%;
}

.icon--contrast:before {
  content: "\f042";
}

.icon--envelope:before {
  content: "\f003";
}

/*
# Off Canvas

Styleguide 14
*/
.off-canvas {
  overflow-x: hidden;
}

.off-canvas__menu {
  height: 100%;
  overflow-y: auto;
  position: fixed;
  top: 0;
  z-index: 9999;
}

.off-canvas__menu, .off-canvas__content {
  -webkit-transition-duration: .25s;
          transition-duration: .25s;
  -webkit-transition-property: left, right;
          transition-property: left, right;
  -webkit-transition-timing-function: ease-in-out;
          transition-timing-function: ease-in-out;
}

/*
# Off Canvas

The Off Canvas mixins are used to create the off canvas menu element. This module is meant to affect the entire viewport and should <strong>not</strong> be nested inside another element like the example shown below. JavaScript is required to dynamically toggle the menu activation. See top left corner of the viewport where the off canvas menu would be located when the module is active.
<br><br>
The <code>%off-canvas</code>, <code>%off-canvas-menu</code>, and <code>%off-canvas-transition</code> placeholders defines the base styles for each block element and are all are required.

<pre>.off-canvas {
  @extend %off-canvas;
}
.off-canvas__menu {
  @extend %off-canvas-menu;
  @extend %off-canvas-transition;
  @include off-canvas($el: menu, $side: left, $active: false);
  .off-canvas--is-active & {
    @include off-canvas($el: menu, $side: left, $active: true);
  }
}
.off-canvas__content {
  @include off-canvas($el: content, $side: left, $active: false);
  @extend %off-canvas-transition;
  .off-canvas--is-active & {
    @include off-canvas($el: content, $side: left, $active: true);
  }
}</pre>

Markup:
<div class="off-canvas $modifierClass">
  <div class="off-canvas__menu">Off Canvas Menu</div>
  <div class="off-canvas__content">
    <div><button>Menu</button></div>
    <p>Off Canvas Content</p>
  </div>
</div>

.off-canvas--is-active - active off canvas menu

Styleguide 14.0.1
*/
.off-canvas__menu {
  left: -75%;
  width: 75%;
}
.off-canvas--is-active .off-canvas__menu {
  left: 0;
  width: 75%;
}

.off-canvas__content {
  left: 0;
}
.off-canvas--is-active .off-canvas__content {
  position: fixed;
  width: 100%;
  left: 75%;
}

/*
# Responsive Embed

Styleguide 15
*/
.responsive-embed {
  height: 0;
  overflow: hidden;
  position: relative;
}
.responsive-embed iframe,
.responsive-embed embed,
.responsive-embed object {
  height: 100%;
  left: 0;
  position: absolute;
  top: 0;
  width: 100%;
}

/*
# Responsive Embeds

The mixins provide styles to create repsonisve iframes and video elements. The <code>%responsive-embed</code> placeholder defines the base styles to make iframes, embeds, and objects responsive. All are required.

<pre>.responsive-embed {
  @extend %responsive-embed;
  @include responsive-embed($ratio-width: 1, $ratio-height: 1, $video: false);
}
.responsive-embed--video {
  @include responsive-embed($ratio-width: 16, $ratio-height: 9, $video: true);
}
.responsive-embed--map {
  @include responsive-embed($ratio-width: 4, $ratio-height: 3, $video: false);
}</pre>

Markup:
<div class="responsive-embed $modifierClass">
  <iframe src='http://www.youtube.com/embed/QILiHiTD3uc' frameborder='0' allowfullscreen></iframe>
</div>

.responsive-embed--video - 16:9 wide screen ratio
.responsive-embed--map - 4:3 screen ratio

Styleguide 15.0.1
*/
.responsive-embed {
  padding-bottom: 100%;
}

.responsive-embed--video {
  padding-top: 30px;
  padding-bottom: 56.25%;
}

.responsive-embed--map {
  padding-bottom: 75%;
}

/*
# Button Dropdown

Styleguide 16
*/
.button-dropdown {
  display: inline-block;
  position: relative;
}

.button-dropdown__content {
  position: absolute;
  z-index: 999;
}

/*
# Button Dropdown

The mixins provide styles to create button dropdowns. The <code>%button-dropdown</code> and <code>%button-dropdown-content</code> placeholder defines the base styles. Use JavaScript to toggle the dropdown content. All are required.

<pre>.button-dropdown {
  @extend %button-dropdown;
}
.button-dropdown__content {
  @extend %button-dropdown-content;
  @include button-dropdown-content($width: 300%, $active: false);
  .button-dropdown--is-active & {
    @include button-dropdown-content($width: false, $active: true);
  }
}</pre>

Markup:
<div class="button-dropdown $modifierClass">
  <button>Menu</button>
  <div class="button-dropdown__content">
    <p>The content here. can be a menu, paragraph, or whatever.</p>
  </div>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>

.button-dropdown--is-active - active button dropdown

Styleguide 16.0.1
*/
.button-dropdown__content {
  left: -9999px;
  min-width: 300%;
}
.button-dropdown--is-active .button-dropdown__content {
  left: 0;
}

/*
# Pager

Styleguide 17
*/
.pager {
  overflow: auto;
}

.pager__item {
  position: relative;
  text-align: center;
}

/*
# Pager

The mixins provide styles to create a pager. The <code>%pager</code> and <code>%pager-item</code> placeholder defines the base styles of the block elements. All are required.

<pre>.pager {
  @extend %pager;
}
.pager__item {
  @extend %pager-item;
}
.pager__item--left {
  @include pager-item($float: left);
}
.pager__item--right {
  @include pager-item($float: right);
}
.pager__item--none {
  @include pager-item($float: none);
}</pre>

Markup:
<div class="pager">
  <div class="pager__item pager__item--left">left</div>
  <div class="pager__item pager__item--right">right</div>
</div>

Styleguide 17.0.1
*/
.pager__item--left {
  float: left;
}

.pager__item--right {
  float: right;
}

.pager__item--none {
  float: none;
}

/*
# Pagination

Styleguide 18
*/
.pagination {
  display: block;
  font-size: 0;
}

.pagination__item {
  display: inline-block;
  font-size: 14px;
}

/*
# Pagination

The mixins provide styles to create a series of links that represent pagination. The <code>%pagination</code> and <code>%pagination-item</code> placeholder defines the base styles of the block elements. All are required.

<pre>.pagination {
  @extend %unstyled-list;
  @extend %pagination;
}
.pagination__item {
  @extend %pagination-item;
  a {
    @extend %block-link;
    @include pagination-link-size($size: $large-font-size, $lines: 2);
    @media screen and (min-width: $small-screen) {
      @include pagination-link-size($size: $base-font-size, $lines: 1);
    }
  }
}
.pagination--center {
  @include pagination($align: center);
}
.pagination--right {
  @include pagination($align: right);
}</pre>

Markup:
<ul class="pagination $modifierClass">
  <li class="pagination__item"><a href="#">1</a></li>
  <li class="pagination__item"><a href="#">2</a></li>
  <li class="pagination__item"><a href="#">3</a></li>
  <li class="pagination__item"><a href="#">4</a></li>
  <li class="pagination__item"><a href="#">5</a></li>
  <li class="pagination__item"><a href="#">6</a></li>
  <li class="pagination__item"><a href="#">7</a></li>
  <li class="pagination__item"><a href="#">8</a></li>
  <li class="pagination__item"><a href="#">9</a></li>
  <li class="pagination__item"><a href="#">10</a></li>
</ul>

.pagination--center - center aligned pagination
.pagination--right  - right aligned pagination

Styleguide 18.0.1
*/
.pagination__item a {
  font-size: 1.27393em;
  line-height: 2.35492;
  height: 2.35492em;
  padding-left: 0.63696em;
  padding-right: 0.63696em;
}
@media screen and (min-width: 48em) {
  .pagination__item a {
    font-size: 1em;
    line-height: 1.5;
    height: 1.5em;
    padding-left: 0.5em;
    padding-right: 0.5em;
  }
}

.pagination--center {
  text-align: center;
}

.pagination--right {
  text-align: right;
}

/*
# Tables

Styleguide 19
*/
/*
# Table

The mixins provide styles to create fancy tables.

<pre>.table {
  th,
  td {
    @include table-size($size: $large-font-size, $lines: 2);
    @media screen and (min-width: $small-screen) {
      @include table-size($size: $base-font-size, $lines: 1);
    }
  }
  thead {
    @include table-color($colors: (background-color: $dark-gray, color: $white));
  }
  tbody {
    @include table-body($border-width: 1px, $colors: (background-color: $white, color: $dark-gray));
  }
  tfoot {
    td {
      @include table-size($size: $base-font-size, $lines: 1);
      @media screen and (min-width: $small-screen) {
        @include table-size($size: $small-font-size, $lines: 1);
      }
    }
  }
  caption {
    @include font-size($to: $base-font-size, $lines: 1);
    @media screen and (min-width: $small-screen) {
      @include font-size($to: $large-font-size, $lines: 2);
    }
  }
}
.table--bordered {
  @include table-bordered($border-width: 1px, $border-color: $dark-gray);
}
.table--zebra-row {
  @include table-zebra($el: tr, $colors: (background-color: $light-gray, color: $dark-gray));
}
.table--zebra-col {
  @include table-zebra($el: td, $colors: (background-color: $light-gray, color: $dark-gray));
}
.table--large {
  th,
  td {
    @include table-size($size: $base-font-size, $lines: 1);
    @media screen and (min-width: $small-screen) {
      @include table-size($size: $h3-font-size, $lines: 3);
    }
  }
  tfoot {
    td {
      @include table-size($size: $small-font-size, $lines: 1);
      @media screen and (min-width: $small-screen) {
        @include table-size($size: $base-font-size, $lines: 1);
      }
    }
  }
}</pre>

Markup:
<table class="table $modifierClass" cellpadding="0" cellspacing="0" border="0">
  <thead>
    <tr>
      <th>Header 1</th>
      <th>Header 2</th>
      <th>Header 3</th>
    </tr>
  </thead>
  <tfoot>
    <tr>
      <td colspan="3">Footer</td>
    </tr>
  </tfoot>
  <tbody>
    <tr>
      <td>Row 1: cell 1</td>
      <td>Row 1: cell 2</td>
      <td>Row 1: cell 3</td>
    </tr>
    <tr>
      <td>Row 2: cell 1</td>
      <td>Row 2: cell 2</td>
      <td>Row 2: cell 3</td>
    </tr>
    <tr>
      <td>Row 3: cell 1</td>
      <td>Row 3: cell 2</td>
      <td>Row 3: cell 3</td>
    </tr>
  </tbody>
  <caption>This is a table caption</caption>
</table>

.table--bordered - bordered table
.table--zebra-row - zebra row table
.table--zebra-col - zebra column table
.table--large - large table

Styleguide 19.0.1
*/
.table th,
.table td {
  font-size: 1.27393em;
  line-height: 2.35492;
  min-height: 2.35492em;
  padding-left: 1.27393em;
  padding-right: 1.27393em;
}
@media screen and (min-width: 48em) {
  .table th,
  .table td {
    font-size: 1em;
    line-height: 1.5;
    min-height: 1.5em;
    padding-left: 1em;
    padding-right: 1em;
  }
}
.table thead {
  background-color: #666666;
  color: white;
}
.table tbody {
  background-color: white;
  color: #666666;
}
.table tbody tr {
  border-bottom: 1px solid #666666;
}
.table tfoot td {
  font-size: 1em;
  line-height: 1.5;
  min-height: 1.5em;
  padding-left: 1em;
  padding-right: 1em;
}
@media screen and (min-width: 48em) {
  .table tfoot td {
    font-size: 0.78736em;
    line-height: 1.90511;
    min-height: 1.90511em;
    padding-left: 0.78736em;
    padding-right: 0.78736em;
  }
}
.table caption {
  font-size: 1em;
  line-height: 1.5;
}
@media screen and (min-width: 48em) {
  .table caption {
    font-size: 1.27393em;
    line-height: 2.35492;
  }
}

.table--bordered {
  border: 1px solid #666666;
}
.table--bordered thead th,
.table--bordered tbody td,
.table--bordered tfoot td {
  border-left: 1px solid #666666;
}
.table--bordered thead th:first-child,
.table--bordered tbody td:first-child,
.table--bordered tfoot td:first-child {
  border-left: 0;
}

.table--zebra-row tbody tr:nth-child(odd) {
  background-color: #cccccc;
  color: #666666;
}

.table--zebra-col tbody td:nth-child(odd) {
  background-color: #cccccc;
  color: #666666;
}

.table--large th,
.table--large td {
  font-size: 1em;
  line-height: 1.5;
  min-height: 1.5em;
  padding-left: 1em;
  padding-right: 1em;
}
@media screen and (min-width: 48em) {
  .table--large th,
  .table--large td {
    font-size: 1.618em;
    line-height: 2.78121;
    min-height: 2.78121em;
    padding-left: 1.618em;
    padding-right: 1.618em;
  }
}
.table--large tfoot td {
  font-size: 0.78736em;
  line-height: 1.90511;
  min-height: 1.90511em;
  padding-left: 0.78736em;
  padding-right: 0.78736em;
}
@media screen and (min-width: 48em) {
  .table--large tfoot td {
    font-size: 1em;
    line-height: 1.5;
    min-height: 1.5em;
    padding-left: 1em;
    padding-right: 1em;
  }
}

/*
# Rule

Styleguide 20
*/
.rule, hr.rule--faded,
hr.rule--shadow {
  border: 0;
}

.rule--inset {
  border-top-style: solid;
}

.rule--ornament {
  position: relative;
}
.rule--ornament:after {
  position: absolute;
  top: 0;
  left: 50%;
  line-height: 0;
  text-align: center;
}
[data-ornament].rule--ornament:after {
  content: attr(data-ornament);
}

/*
# Fancy Rules

The mixins provide styles to create fancy horizontal rules.

<pre>.rule {
  @extend %rule-reset;
  @include rule($style: solid, $width: 1px, $color: $light-gray);
}
.rule--dashed {
  @include rule($style: dashed, $width: false, $color: false);
}
.rule--double {
  @include rule($style: double, $width: 4px, $color: false);
}
hr.rule--faded,
hr.rule--shadow {
  @extend %rule-reset;
}
.rule--faded {
  @include rule-fade($width: 1px, $color: $gray);
}
.rule--shadow {
  @include rule-shadow($width: $base-line-height, $color: $black);
}
.rule--inset {
  @extend %rule-inset;
  @include rule-inset($widths: (bottom: 2px, top: 1px), $colors: (bottom: $light-gray, top: $dark-gray));
}</pre>

Markup:
<hr class="rule $modifierClass" />

.rule--dashed - Dashed rule
.rule--double - Double rule
.rule--faded  - Faded rule
.rule--shadow - Shadow rule
.rule--inset  - Inset rule

Styleguide 20.0.1
*/
.rule {
  border-bottom-width: 1px;
  border-bottom-style: solid;
  border-bottom-color: #cccccc;
  margin-bottom: 1.42857em;
}

.rule--dashed {
  border-bottom-style: dashed;
}

.rule--double {
  border-bottom-width: 4px;
  border-bottom-style: double;
  margin-bottom: 1.21429em;
}

.rule--faded {
  background: -webkit-linear-gradient(right, rgba(153, 153, 153, 0) 0%, #999999 25%, #999999 75%, rgba(153, 153, 153, 0) 100%);
  background: linear-gradient(to left, rgba(153, 153, 153, 0) 0%, #999999 25%, #999999 75%, rgba(153, 153, 153, 0) 100%);
  height: 1px;
  margin-bottom: 1.42857em;
}

.rule--shadow {
  box-shadow: inset 0 21px 21px -21px rgba(34, 34, 34, 0.3);
  height: 21px;
  margin-bottom: 0em;
}

.rule--inset {
  border-bottom-color: rgba(204, 204, 204, 0.5);
  border-top-color: rgba(102, 102, 102, 0.5);
  border-bottom-width: 2px;
  border-top-width: 1px;
  margin-bottom: 1.28571em;
}

/*
# Ornamental Rules

The mixins provide styles to create ornamental horizontal rules.

<pre>.rule--ornament {
  @extend %rule-ornament;
  @include rule-ornament($content: false, $content-size: $base-font-size, $content-colors: (background-color: $white, color: $light-gray));
}
hr.rule.rule--ornament-scissors {
  @include rule-ornament($content: '\2702', $content-size: false, $content-colors: false);
}
.rule--ornament-large {
  @include rule-ornament($content: false, $content-size: $h1-font-size, $content-colors: false);
}</pre>

Markup:
<hr class="rule rule--ornament $modifierClass" data-ornament="!">

.rule--ornament-scissors - override content through styles
.rule--ornament-large - large ornaments

Styleguide 20.0.2
*/
.rule--ornament:after {
  background-color: white;
  color: #cccccc;
  font-size: 14px;
  height: 14px;
  margin-left: -7px;
  width: 14px;
}

hr.rule.rule--ornament-scissors:after {
  content: "\2702";
}

.rule--ornament-large:after {
  font-size: 36.651px;
  height: 36.651px;
  margin-left: -18.3255px;
  width: 36.651px;
}

/*
# Modal

Styleguide 21
*/
.modal {
  display: none;
  position: fixed;
  bottom: 0;
  left: 0;
  right: 0;
  top: 0;
  z-index: 9999;
}

.modal__content {
  bottom: 0;
  height: 90%;
  left: 0;
  margin: auto;
  overflow: auto;
  position: absolute;
  right: 0;
  top: 0;
  width: 90%;
}

.modal__close {
  position: absolute;
}

/*
# Modal

The mixins provide styles to create modal popups. JavaScript is required to toggle the popup.

<pre>.modal {
  @extend %modal;
  @include modal($background: $black, $active: false);
}
.modal--is-active {
  @include modal($background: false, $active: true);
}
.modal__content {
  @extend %modal-content;
  @include modal-content($padding: em($large-font-size), $background: $white, $align: false, $size: false);
}
.modal__content--right {
  @include modal-content($padding: false, $background: false, $align: right, $size: false);
}
.modal__content--left {
  @include modal-content($padding: false, $background: false, $align: left, $size: false);
}
.modal__content--top {
  @include modal-content($padding: false, $background: false, $align: top, $size: false);
}
.modal__content--bottom {
  @include modal-content($padding: false, $background: false, $align: bottom, $size: false);
}
.modal__content--small {
  @include modal-content($padding: false, $background: false, $align: false, $size: 50%);
}
.modal__close {
  @extend %modal-close;
  @include modal-close($offset: 3%);
}</pre>

Markup:
<div class="modal">
  <div class="modal__content">
    <a href="#" class="modal__close">X</a>
    <p>Some pretty content goes here.</p>
  </div>
</div>

Styleguide 21.0.1
*/
.modal {
  background-color: #222222;
}

.modal--is-active {
  display: block;
}

.modal__content {
  padding: 0.09099em;
  background-color: white;
  box-shadow: 0 0 40px #222222;
}

.modal__content--right {
  left: auto;
  right: 1.5em;
}

.modal__content--left {
  left: 1.5em;
  right: auto;
}

.modal__content--top {
  bottom: auto;
  top: 1.5em;
}

.modal__content--bottom {
  bottom: 1.5em;
  top: auto;
}

.modal__content--small {
  width: 50%;
  height: 50%;
}

.modal__close {
  top: 3%;
  right: 3%;
}

.text-align-left {
  text-align: left;
}

.text-align-right {
  text-align: right;
}

.text-align-center {
  text-align: center;
}

.radius {
  border-radius: 4px;
}

.top-left-radius {
  border-top-left-radius: 4px;
}

.top-right-radius {
  border-top-right-radius: 4px;
}

.bottom-left-radius {
  border-bottom-left-radius: 4px;
}

.bottom-right-radius {
  border-bottom-right-radius: 4px;
}

.float-left {
  float: left;
}

img.float-left {
  margin-right: 14px;
}

.float-right {
  float: right;
}

img.float-right {
  margin-left: 14px;
}

.stick-to-top {
  left: 0;
  position: fixed;
  top: 0;
  width: 100%;
}

.stick-to-bottom {
  bottom: 0;
  left: 0;
  position: fixed;
  width: 100%;
}

@media screen and (max-width: 48em) {
  .hide-from-small-device {
    display: none;
  }
}

@media screen and (min-width: 48em) {
  .show-on-small-device {
    display: none;
  }
}

.hidden {
  display: none !important;
  visibility: hidden;
}

.visuallyhidden {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

.visuallyhidden.focusable:active,
.visuallyhidden.focusable:focus {
  clip: auto;
  height: auto;
  margin: 0;
  overflow: visible;
  position: static;
  width: auto;
}

.invisible {
  visibility: hidden;
}
